C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/14/2024 15:32:12 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CENCOR_PROGRAMM
OBJECT MODULE PLACED IN .\Code\Obj\CENCOR_PROGRAMM.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\CENCOR_PROGRAMM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_
                    -nuvoton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST
                    -\CENCOR_PROGRAMM.lst) TABS(2) OBJECT(.\Code\Obj\CENCOR_PROGRAMM.obj)

line level    source

   1          //********************************************************
   2          //  CENCOR. 
   3          //********************************************************
   4          
   5          #include <CENCOR_PROGRAMM.h>
   6          
   7          xdata int mainStateProgressSPI = 0;   // state main func.( work cencor)
   8          xdata int modeRF = RX_MODE;           // mode by default
   9          
  10          //********************************************************
  11          // MAIN FUNC - work censor
  12          //********************************************************
  13          void init_device(){
  14   1        GPIO_init();
  15   1        SPI_init_Timer();
  16   1        SPI_CLK_init(0);
  17   1        
  18   1        set_EA;                   // enable interrupts
  19   1      }
  20          
  21          //********************************************************
  22          //  Work with periphery /led/button
  23          //********************************************************
  24          
  25          //********************************************************
  26          //  Work with ADC
  27          //********************************************************
  28          
  29          
  30          //********************************************************
  31          //  Work with NRF and FRAM 
  32          //********************************************************
  33          
  34          void Work_NRF(){
  35   1        
  36   1        if(FlagInComSPIGlobal) {    // exchange spi
  37   2          /*waiting*/
  38   2        }
  39   1        else{
  40   2          switch(mainStateProgressSPI){
  41   3            case START_PROCESS:   
  42   3              Process_init_RF();
  43   3              break;        
  44   3            /*main work RF*/
  45   3            case 1: 
  46   3              Process_work_RF();
  47   3              break;
  48   3            // case 2: init FRAM
  49   3            // case 3: Work with FRAM
  50   3            case END_PROCESS:break;
  51   3          }
  52   2        }
  53   1      }
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/14/2024 15:32:12 PAGE 2   

  54          
  55          /*init radio  NRF24*/
  56          void Process_init_RF(void){
  57   1        switch(modeRF){
  58   2          case TX_MODE:
  59   2            if(NRF_init(&packetTX)){    // end init rf?
  60   3              mainStateProgressSPI++;   // process ->end go to next
  61   3            }
  62   2          case RX_MODE:
  63   2            if(NRF_init(&packetRX)){    // end init rf?
  64   3              mainStateProgressSPI++;   // process ->end go to next
  65   3            }
  66   2          default:break;
  67   2        }
  68   1      }
  69          
  70          /*main work RF*/
  71          void Process_work_RF(void){
  72   1        /*
  73   1        if(NRF_init(&packetRX_READ)){   // end init rf?
  74   1            //mainStateProgressSPI++;   // process ->end go to next
  75   1        }*/
  76   1        //прочитать то что я записал
  77   1        //#ifndef TX
  78   1      
  79   1        /*
  80   1        if( NRF_send() ){
  81   1          PIN_LED_RED = ~PIN_LED_RED;
  82   1        }
  83   1        PIN_LED_GREEN = ~PIN_LED_GREEN;
  84   1        */
  85   1        
  86   1        //#ifndef RX
  87   1        
  88   1        if( NRF_get() ){
  89   2          PIN_LED_RED = ~PIN_LED_RED;
  90   2        }
  91   1        if(readBuf[1] != 0x30){
  92   2            PIN_LED_GREEN = ~PIN_LED_GREEN;
  93   2        }
  94   1        
  95   1        // пока прочитать статус и самостоятельно считать
  96   1        //  а после настроить прерывание по нему ( извлекать)
  97   1        //  флага нет , не считывать данные и пропускать процедуру
  98   1        // считывания
  99   1      }
 100          
 101          //********************************************************
 102          // ISR SPI
 103          //********************************************************
 104          void ISR_Timer0() interrupt 1 {         // <Interface_com.H>
 105   1        if(FlagInComSPIGlobal){ 
 106   2          if(FlagInComDelay){
 107   3            SPI_Delay();                      //  Spi delay
 108   3          } 
 109   2          else{
 110   3            SPI_exchange_start();             //  main exchange SPI
 111   3          } 
 112   2        }
 113   1      }
 114          
 115          //********************************************************
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/14/2024 15:32:12 PAGE 3   

 116          // ISR ADC
 117          //********************************************************
 118          /*void ISR_INT0() interrupt 0 {  // INT0
 119            if(FlagInComSPIGlobal){ InCom_SPI_exchange();}
 120          }*/
 121          
 122          //********************************************************
 123          // ISR NRF
 124          //********************************************************
 125          void ISR_INT1() interrupt 2 {  // INT1
 126   1        FlagDataReadReady = 1;
 127   1        PIN_LED_RED = ~PIN_LED_RED;
 128   1      }
 129          
 130          
 131          
 132          
 133          
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    205    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
