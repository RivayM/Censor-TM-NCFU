C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   11/13/2024 14:35:26 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CENCOR_PROGRAMM
OBJECT MODULE PLACED IN .\Code\Obj\CENCOR_PROGRAMM.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\CENCOR_PROGRAMM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_
                    -nuvoton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST
                    -\CENCOR_PROGRAMM.lst) TABS(2) OBJECT(.\Code\Obj\CENCOR_PROGRAMM.obj)

line level    source

   1          //********************************************************
   2          //  CENCOR. 
   3          //********************************************************
   4          
   5          #include <CENCOR_PROGRAMM.h>
   6          
   7          xdata int mainStateProgressSPI = 0;   // number current process spi
   8          xdata int mainStateProgressADC = 0;   // number current process adc
   9          
  10          //********************************************************
  11          // MAIN FUNC - work censor
  12          //********************************************************
  13          void init_device(){
  14   1        GPIO_init();
  15   1        SPI_init_Timer();
  16   1        SPI_CLK_init(0);
  17   1        set_EA;                   // enable interrupts
  18   1      }
  19          
  20          //********************************************************
  21          //  Work with periphery /led/button
  22          //********************************************************
  23          
  24          //********************************************************
  25          //  Work with ADC
  26          //********************************************************
  27          
  28          
  29          //********************************************************
  30          //  Work with NRF and FRAM (spi)
  31          //********************************************************
  32          
  33          void Work_NRF(){
  34   1        if(FlagSPIGlobal) {           // work spi
  35   2          /*  waiting */
  36   2        }
  37   1        else{
  38   2          switch(mainStateProgressSPI){
  39   3            case START_PROCESS:   Process_init_RF();    break;        
  40   3            case 1: Process_work_RF();                  break;
  41   3            // case 2: init FRAM
  42   3            // case 3: Work with FRAM
  43   3            case END_PROCESS:break;
  44   3          }
  45   2        }
  46   1      }
  47          
  48          /*init radio  NRF24*/
  49          void Process_init_RF(void){
  50   1        if(NRF_init()){   // end init rf?
  51   2          mainStateProgressSPI++;   // process ->end go to next
  52   2        }
  53   1      }
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   11/13/2024 14:35:26 PAGE 2   

  54          
  55          /*main work NRF24*/
  56          void Process_work_RF(void){
  57   1        if( NRF_get() ){
  58   2          
  59   2        }
  60   1        if(readBuf[1]){
  61   2            PIN_LED_GREEN = ~PIN_LED_GREEN;
  62   2        }
  63   1        
  64   1        // пока прочитать статус и самостоятельно считать
  65   1        // а после настроить прерывание по нему ( извлекать)
  66   1        // флага нет , не считывать данные и пропускать процедуру
  67   1        // считывания
  68   1      }
  69          
  70          //********************************************************
  71          // ISR SPI
  72          //********************************************************
  73          void ISR_Timer0() interrupt 1 {         // <Interface_com.H>
  74   1        if(FlagSPIGlobal){ 
  75   2            if(FlagSPIDelay){
  76   3              SPI_Delay();            // delay SPI
  77   3            } 
  78   2            else{
  79   3              SPI_exchange_start();   // exchange SPI
  80   3            } 
  81   2        }
  82   1      }
  83          
  84          //********************************************************
  85          // ISR ADC
  86          //********************************************************
  87          /*void ISR_INT0() interrupt 0 {  // INT0
  88            if(FlagInComSPIGlobal){ InCom_SPI_exchange();}
  89          }*/
  90          
  91          //********************************************************
  92          // ISR NRF
  93          //********************************************************
  94          void ISR_INT1() interrupt 2 {  // INT1
  95   1        FlagDataReadReady = 1;
  96   1        PIN_LED_RED =~ PIN_LED_RED;
  97   1      }
  98          
  99          
 100          
 101          
 102          
 103          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    149    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    454    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
