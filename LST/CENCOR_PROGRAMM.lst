C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/15/2024 15:56:22 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CENCOR_PROGRAMM
OBJECT MODULE PLACED IN .\Code\Obj\CENCOR_PROGRAMM.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\CENCOR_PROGRAMM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_
                    -nuvoton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST
                    -\CENCOR_PROGRAMM.lst) TABS(2) OBJECT(.\Code\Obj\CENCOR_PROGRAMM.obj)

line level    source

   1          //********************************************************
   2          //  CENCOR. 
   3          //********************************************************
   4          
   5          #include <CENCOR_PROGRAMM.h>
   6          
   7          xdata int mainStateProgressSPI = 0;   // state main func.( work cencor)
   8          xdata int modeRF = RX_MODE;           // mode by default
   9          
  10          bit tact = 0;
  11          
  12          //********************************************************
  13          // MAIN FUNC - work censor
  14          //********************************************************
  15          void init_device(){
  16   1        GPIO_init();
  17   1        SPI_init_Timer();
  18   1        SPI_CLK_init(0);
  19   1        
  20   1        set_EA;                   // enable interrupts
  21   1      }
  22          
  23          //********************************************************
  24          //  Work with periphery /led/button
  25          //********************************************************
  26          
  27          //********************************************************
  28          //  Work with ADC
  29          //********************************************************
  30          
  31          
  32          //********************************************************
  33          //  Work with NRF and FRAM 
  34          //********************************************************
  35          
  36          void Work_NRF(){
  37   1        
  38   1        if(FlagSPIGlobal) {           // work spi
  39   2      /*  waiting */
  40   2          //if( TactTimer0 ){           // work Timer0
  41   2      /* tact on 1  */
  42   2            /*if(FlagSPIDelay){
  43   2              SPI_Delay();            // delay SPI
  44   2            } 
  45   2            else{
  46   2              SPI_exchange_start();   // exchange SPI
  47   2            } 
  48   2          } 
  49   2          else{*/
  50   2      /* tact on 0  */
  51   2          //}
  52   2        }
  53   1        else{
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/15/2024 15:56:22 PAGE 2   

  54   2          switch(mainStateProgressSPI){
  55   3            case START_PROCESS:   
  56   3              Process_init_RF();
  57   3              break;        
  58   3      /*main work RF*/
  59   3            case 1: 
  60   3              Process_work_RF();
  61   3              break;
  62   3            // case 2: init FRAM
  63   3            // case 3: Work with FRAM
  64   3            case END_PROCESS:break;
  65   3          }
  66   2        }
  67   1      }
  68          
  69          /*init radio  NRF24*/
  70          void Process_init_RF(void){
  71   1        switch(modeRF){
  72   2          case TX_MODE:
  73   2            if(NRF_init(&packetTX)){    // end init rf?
  74   3              mainStateProgressSPI++;   // process ->end go to next
  75   3            }
  76   2          case RX_MODE:
  77   2            if(NRF_init(&packetRX)){    // end init rf?
  78   3              mainStateProgressSPI++;   // process ->end go to next
  79   3            }
  80   2          default:break;
  81   2        }
  82   1      }
  83          
  84          /*main work RF*/
  85          void Process_work_RF(void){
  86   1        /*
  87   1        if(NRF_init(&packetRX_READ)){   // end init rf?
  88   1            //mainStateProgressSPI++;   // process ->end go to next
  89   1        }*/
  90   1        //прочитать то что я записал
  91   1        //#ifndef TX
  92   1      
  93   1        /*
  94   1        if( NRF_send() ){
  95   1          PIN_LED_RED = ~PIN_LED_RED;
  96   1        }
  97   1        //PIN_LED_GREEN = ~PIN_LED_GREEN;
  98   1        
  99   1        */
 100   1        //#ifndef RX
 101   1        
 102   1        if( NRF_get() ){
 103   2          PIN_LED_RED = ~PIN_LED_RED;
 104   2        }
 105   1        if(readBuf[1] != 0x30){
 106   2            PIN_LED_GREEN = ~PIN_LED_GREEN;
 107   2        }
 108   1        
 109   1        // пока прочитать статус и самостоятельно считать
 110   1        //  а после настроить прерывание по нему ( извлекать)
 111   1        //  флага нет , не считывать данные и пропускать процедуру
 112   1        // считывания
 113   1      }
 114          
 115          //********************************************************
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/15/2024 15:56:22 PAGE 3   

 116          // ISR SPI
 117          //********************************************************
 118          void ISR_Timer0() interrupt 1 {         // <Interface_com.H>
 119   1        if(FlagSPIGlobal){ 
 120   2          //TactTimer0 =~ TactTimer0;
 121   2          
 122   2            if(FlagSPIDelay){
 123   3              SPI_Delay();            // delay SPI
 124   3            } 
 125   2            else{
 126   3              SPI_exchange_start();   // exchange SPI
 127   3            } 
 128   2          
 129   2        }
 130   1      }
 131          
 132          //********************************************************
 133          // ISR ADC
 134          //********************************************************
 135          /*void ISR_INT0() interrupt 0 {  // INT0
 136            if(FlagInComSPIGlobal){ InCom_SPI_exchange();}
 137          }*/
 138          
 139          //********************************************************
 140          // ISR NRF
 141          //********************************************************
 142          void ISR_INT1() interrupt 2 {  // INT1
 143   1        FlagDataReadReady = 1;
 144   1        PIN_LED_RED =~ PIN_LED_RED;
 145   1      }
 146          
 147          
 148          
 149          
 150          
 151          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    205    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
