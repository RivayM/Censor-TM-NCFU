C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   11/22/2024 15:53:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CENCOR_PROGRAMM
OBJECT MODULE PLACED IN .\Code\Obj\CENCOR_PROGRAMM.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\CENCOR_PROGRAMM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_
                    -nuvoton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST
                    -\CENCOR_PROGRAMM.lst) TABS(2) OBJECT(.\Code\Obj\CENCOR_PROGRAMM.obj)

line level    source

   1          //********************************************************
   2          //  CENCOR. 
   3          //********************************************************
   4          
   5          #include <CENCOR_PROGRAMM.h>
   6          
   7          xdata int mainStateProgressSPI = 0;   // number current process spi
   8          xdata int mainStateProgressADC = 0;   // number current process adc
   9          
  10          //********************************************************
  11          // MAIN FUNC - work censor
  12          //********************************************************
  13          void init_device(){
  14   1        GPIO_init();
  15   1        Init_Timer0();
  16   1        SPI_CLK_init(0);
  17   1        #if USE_RADIO
  18   1          /*    */
  19   1        #endif
  20   1        #if USE_ADC
  21   1          /*    */
  22   1        #endif
  23   1        #if USE_PERIPHERY
                  /*    */
                #endif
  26   1        #if USE_DISPLAY
                  /*    */
                #endif
  29   1        #if USE_FRAM
                  /*    */
                #endif
  32   1      
  33   1        set_EA;                   // enable interrupts
  34   1      }
  35          
  36          //********************************************************
  37          //  Work with NRF
  38          //********************************************************
  39          #if USE_RADIO
  40          
  41          void Work_NRF(){
  42   1        if(FlagSPIGlobal) {           // work spi
  43   2          /*  waiting */
  44   2        }
  45   1        else{
  46   2          switch(mainStateProgressSPI){
  47   3            case START_PROCESS:   Process_init_RF();    break;        
  48   3            case 1: Process_work_RF();                  break;
  49   3            // case 2: init FRAM
  50   3            // case 3: Work with FRAM
  51   3            case END_PROCESS:break;
  52   3          }
  53   2        }
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   11/22/2024 15:53:04 PAGE 2   

  54   1      }
  55          
  56          /*init radio  NRF24*/
  57          void Process_init_RF(void){
  58   1        if(NRF_init()){   // end init rf?
  59   2          mainStateProgressSPI++;   // process ->end go to next
  60   2        }
  61   1      }
  62          
  63          /*main work NRF24*/
  64          void Process_work_RF(void){
  65   1        if( NRF_get() ){
  66   2          
  67   2        }
  68   1        if(readBuf[1]){
  69   2            PIN_LED_GREEN = ~PIN_LED_GREEN;
  70   2        }
  71   1        
  72   1        // пока прочитать статус и самостоятельно считать
  73   1        // а после настроить прерывание по нему ( извлекать)
  74   1        // флага нет , не считывать данные и пропускать процедуру
  75   1        // считывания
  76   1      }
  77          
  78          
  79          #endif /*include radio in project*/
  80          //********************************************************
  81          //  Work with periphery /led/button
  82          //********************************************************
  83          #if USE_PERIPHERY
              #endif /*include Periphery in project*/
  85          //********************************************************
  86          //  Work with ADC
  87          //********************************************************
  88          #if USE_ADC
  89          #endif /*include ADC in project*/
  90          //********************************************************
  91          //  FRAM
  92          //********************************************************
  93          #if USE_FRAM
              #endif /*include FRAM in project*/
  95          //********************************************************
  96          //  DISPLAY
  97          //********************************************************
  98          #if USE_DISPLAY
              #endif /*include DISPLAY in project*/
 100          
 101          
 102          
 103          //********************************************************
 104          // ISR SPI
 105          //********************************************************
 106          void ISR_Timer0() interrupt 1 {         // <Interface_com.H>
 107   1        if(FlagSPIGlobal){ 
 108   2            if(FlagSPIDelay){
 109   3              SPI_Delay();            // delay SPI
 110   3            } 
 111   2            else{
 112   3              SPI_exchange_start();   // exchange SPI
 113   3            } 
 114   2        }
 115   1        /* добавить сюда i2c?*/
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   11/22/2024 15:53:04 PAGE 3   

 116   1        
 117   1      }
 118          
 119          //********************************************************
 120          // ISR ADC
 121          //********************************************************
 122          void ISR_INT0() interrupt 0 {  // INT0
 123   1        
 124   1        
 125   1        
 126   1      }
 127          
 128          //********************************************************
 129          // ISR NRF
 130          //********************************************************
 131          void ISR_INT1() interrupt 2 {  // INT1
 132   1        FlagDataReadReady = 1;
 133   1        PIN_LED_RED =~ PIN_LED_RED;
 134   1      }
 135          
 136          
 137          
 138          
 139          
 140          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    149    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    472    ----
   PDATA SIZE       =     12    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
