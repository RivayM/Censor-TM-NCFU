C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/07/2024 15:07:21 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CENCOR_PROGRAMM
OBJECT MODULE PLACED IN .\Code\Obj\CENCOR_PROGRAMM.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\CENCOR_PROGRAMM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_
                    -nuvoton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST
                    -\CENCOR_PROGRAMM.lst) TABS(2) OBJECT(.\Code\Obj\CENCOR_PROGRAMM.obj)

line level    source

   1          //********************************************************
   2          //  CENCOR. 
   3          //********************************************************
   4          
   5          #include <CENCOR_PROGRAMM.h>
   6          
   7          xdata int mainStateProgressSPI = 0;   // state main func.( work cencor)
   8          xdata int modeRF = RX_MODE;           // mode by default
   9          
  10          //********************************************************
  11          // MAIN FUNC - work censor
  12          //********************************************************
  13          
  14          //********************************************************
  15          //  Work with periphery /led/button
  16          //********************************************************
  17          
  18          //********************************************************
  19          //  Work with ADC
  20          //********************************************************
  21          
  22          
  23          //********************************************************
  24          //  Work with NRF and FRAM 
  25          //********************************************************
  26          
  27          void Work_NRF(){
  28   1        
  29   1        if(FlagInComSPIGlobal) {    // exchange spi
  30   2          /*waiting*/
  31   2        }
  32   1        else{
  33   2          switch(mainStateProgressSPI){
  34   3            case START_PROCESS:   
  35   3              Process_init_RF();
  36   3              break;        
  37   3            /*main work RF*/
  38   3            case 1: 
  39   3              Process_work_RF();
  40   3              break;
  41   3            // case 2: init FRAM
  42   3            // case 3: Work with FRAM
  43   3            case END_PROCESS:break;
  44   3          }
  45   2        }
  46   1      }
  47          
  48          /*init radio  NRF24*/
  49          void Process_init_RF(void){
  50   1        switch(modeRF){
  51   2          case TX_MODE:
  52   2            if(NRF_init(&packetTX)){    // end init rf?
  53   3              mainStateProgressSPI++;   // process ->end go to next
C51 COMPILER V9.53.0.0   CENCOR_PROGRAMM                                                   10/07/2024 15:07:21 PAGE 2   

  54   3            }
  55   2          case RX_MODE:
  56   2            if(NRF_init(&packetRX)){    // end init rf?
  57   3              mainStateProgressSPI++;   // process ->end go to next
  58   3            }
  59   2          default:break;
  60   2        }
  61   1      }
  62          
  63          /*main work RF*/
  64          void Process_work_RF(void){
  65   1        if( NRF_get() ){
  66   2          /*mainStateProgressSPI++;*/
  67   2        }
  68   1        
  69   1        // пока прочитать статус и самостоятельно считать
  70   1        //  а после настроить прерывание по нему ( извлекать)
  71   1        //  флага нет , не считывать данные и пропускать процедуру
  72   1        // считывания
  73   1      }
  74          
  75          //********************************************************
  76          // ISR SPI
  77          //********************************************************
  78          void ISR_Timer0() interrupt 1 {  // <Interface_com.H>
  79   1        if(FlagInComSPIGlobal){ InCom_SPI_exchange();}
  80   1      }
  81          
  82          //********************************************************
  83          // ISR ADC
  84          //********************************************************
  85          /*void ISR_INT0() interrupt 1 {  // INT0
  86            if(FlagInComSPIGlobal){ InCom_SPI_exchange();}
  87          }*/
  88          
  89          //********************************************************
  90          // ISR NRF
  91          //********************************************************
  92          void ISR_INT1() interrupt 2 {  // INT1
  93   1        FlagDataReadReady = 1;
  94   1        PIN_LED_RED = ~PIN_LED_RED;
  95   1      }
  96          
  97          
  98          
  99          
 100          
 101          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    169    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
