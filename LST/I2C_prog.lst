C51 COMPILER V9.53.0.0   I2C_PROG                                                          11/22/2024 15:53:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE I2C_PROG
OBJECT MODULE PLACED IN .\Code\Obj\I2C_prog.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\I2C_prog.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\I2C_pr
                    -og.lst) TABS(2) OBJECT(.\Code\Obj\I2C_prog.obj)

line level    source

   1          //**************************************************************************
   2          //  I2C_prog
   3          //**************************************************************************
   4          
   5          #include <I2C_prog.h>
   6          #include <N76E003.H>
   7          
   8          bit FlagI2cStart          = 0;
   9          bit FlagI2cDelay          = 0;
  10          
  11          xdata int sizeBufI2c      = I2C_SIZE_PACKET_BUF;
  12          xdata int sizeADR         = I2C_SIZE_ADR;
  13          xdata int sizeData        = I2C_SIZE_DATA;
  14          xdata int sizeByteForSend = I2C_AMOUNT_PACKETS;
  15          
  16          xdata int counterBitI2c   = 0;
  17          xdata int counterByteI2c  = 0;
  18          
  19          //**************************************************************************
  20          /* additional        */
  21          //**************************************************************************
  22          
  23          void I2C_change_size_ADR (int value){sizeADR        = value;}   
  24          void I2C_change_size_DATA(int value){sizeData       = value;}   
  25          void I2C_change_size_BUF (int value){sizeBufI2c     = value;}   
  26          void I2C_change_size_BYTE(int value){sizeByteSendI2C= value;} 
  27          void I2C_start(){FlagI2cStart = 1;} 
  28          void I2C_Write_Buf(long value){
  29   1        bufferLowValueTX  =   value & 0x00FF;
  30   1        bufferHighValueTX = ((value & 0xFF00) >> 8) >> 8;
  31   1      }
  32          
  33          long I2C_Read_Buf(){
  34   1        long buf = (bufferHighValueRX << 8) << 8;
  35   1        return buf + bufferLowValueRX;
  36   1      }
  37          
  38          //********************************************************
  39          //      _____      _____        ->  CLK
  40          //      |   |      |   |
  41          //______|   |______|   |______
  42          //  f()  f()  f()   f()  f()    ->  I2C_exchange_start()
  43          //********************************************************
  44          /* main f()for timer/every clk launc. When exchange start*/
  45          void I2C_exchange_start(enum I2cMode mode){
  46   1        /*every clk launch*/
  47   1        //this put next byte
  48   1        I2C_exchange_do(mode/*next byte*/);
  49   1      }
  50          
  51          /*instructions when exchange go */
  52          void I2C_exchange_do(enum I2cMode mode){
  53   1        if(counterBitI2c){      
C51 COMPILER V9.53.0.0   I2C_PROG                                                          11/22/2024 15:53:04 PAGE 2   

  54   2          I2C_SLK =~ I2C_SLK;
  55   2        }
  56   1        else{ /*counterBit=0*/            // what do when start packet
  57   2          if(I2C_SLK == I2C_CPOL ){       // check setings
  58   3            /*don't change state*/
  59   3          }
  60   2          else{ 
  61   3            I2C_SLK =~ I2C_SLK;   
  62   3          }   
  63   2        }
  64   1      
  65   1        if( I2C_SLK == I2C_CPHA ){
  66   2          switch(counterBitI2c){            //  start exchange  
  67   3      /*End bit packet  */
  68   3            case I2C_SIZE_PACKET_BUF: /*  max bit */
  69   3              /*need next byte?*/
  70   3              //if(counterByteI2c > sizeByteSendI2C){
  71   3                I2C_exchange_end();
  72   3              //}
  73   3              //else{
  74   3              //  counterByteI2c++;           // next byte
  75   3              //}
  76   3              break;
  77   3      /* process going  */
  78   3            default:  /* 0 -> max bit - 1*/
  79   3              switch(mode){
  80   4                case SEND:  
  81   4                  I2C_SDA = I2C_Get_Bit_Buf_TX();  // get from buf TX
  82   4                  break;
  83   4                case READ:
  84   4                  if(I2C_SDA == 1){I2C_Write_Bit_Buf_RX();}  // read pin and write to buf
  85   4                  break;
  86   4                default:break;
  87   4              }
  88   3      /* next bit   */
  89   3              counterBitI2c++; 
  90   3      /*if will be max size change */
  91   3              if(counterBitI2c == sizeBufI2c){ 
  92   4                counterBitI2c = I2C_SIZE_PACKET_BUF;
  93   4              }
  94   3              break;
  95   3          }
  96   2        }
  97   1      if(counterBitI2c && I2C_CPHA !=I2C_SLK){
  98   2          I2C_SLK =~ I2C_SLK; 
  99   2        }
 100   1      }
 101          
 102          /*instructions exchange end */
 103          void I2C_exchange_end(){
 104   1        FlagI2cStart  = 0;
 105   1        I2C_SLK       = 0;
 106   1        I2C_SDA       = 0;
 107   1      }
 108          
 109          /*delay = each iteration when the call */
 110          void I2C_delay(){
 111   1        // верм€€ задержки
 112   1        // например ширина импульса и следовательно скорость обмена
 113   1      
 114   1      }
 115          
C51 COMPILER V9.53.0.0   I2C_PROG                                                          11/22/2024 15:53:04 PAGE 3   

 116          /*init state SLK */
 117          void I2C_init_SLK(bit value){
 118   1        I2C_SLK = value;
 119   1      }
 120          
 121          /*read TX buf and send bit*/
 122          static bit I2C_Get_Bit_Buf_TX(){
 123   1        int outValue;
 124   1        if( counterBitI2c <=15 ){
 125   2          outValue = bufferLowValueTX * (0x01 << counterBitI2c);
 126   2        }
 127   1        else if(counterBitI2c == 16){ // nuvoton << 15 or >>15 (max)!!!
 128   2          outValue = bufferLowValueTX * 0x8000;
 129   2        }
 130   1        else if(counterBitI2c == 32){ // the same as 16 bit for bufferLowValueTX
 131   2          outValue = bufferHighValueTX * 0x8000;
 132   2        }
 133   1        else if( counterBitI2c > 16 /*&& counterBit!=32*/){
 134   2          outValue = bufferHighValueTX * (0x01 << counterBitI2c);
 135   2        }
 136   1        else {} /*error*/
 137   1        return outValue ? 1 : 0;
 138   1      }
 139          
 140          /*write in buf Rx ( if only input = 1!)*/
 141          static void I2C_Write_Bit_Buf_RX(){
 142   1        if( counterBitI2c <=15 ){
 143   2          bufferLowValueRX += (0x01 << counterBitI2c);
 144   2        }
 145   1        else if(counterBitI2c == 16){ // nuvoton << 15 or >>15 (max)!!!
 146   2          bufferLowValueRX += 0x8000;
 147   2        }
 148   1        else if(counterBitI2c == 32){ // the same as 16 bit for bufferLowValueTX
 149   2          bufferHighValueRX += 0x8000;
 150   2        }
 151   1        else if( counterBitI2c > 16 /*&& counterBit!=32*/){
 152   2          bufferHighValueRX += (0x01 << counterBitI2c);
 153   2        }
 154   1        else {} /*error*/
 155   1      }
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    522    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     26    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
