C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 17:12:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERFACE_COM
OBJECT MODULE PLACED IN .\Code\Obj\Interface_com.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\Interface_com.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nu
                    -voton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\I
                    -nterface_com.lst) TABS(2) OBJECT(.\Code\Obj\Interface_com.obj)

line level    source

   1          //********************************************************
   2          //  Interface common
   3          //********************************************************
   4          #include <Interface_com.H>
   5          #include <N76E003.H>
   6          
   7          unsigned char valueBufferArrayTx[BUFFER_SPI_MASSIV_SIZE];  // прочитать можно только тогда
   8          unsigned char valueBufferArrayRx[BUFFER_SPI_MASSIV_SIZE];  // когда обмен закончен(размер +1)
   9          
  10          int amountByteArrayForSend = BUFFER_SPI_MASSIV_SIZE; // количество байт которое надо отправить
  11          int counterBit             = 0;   // использовать в interrupt 1
  12          int counterByte            = 0;
  13          bit FlagInComSPIGlobal     = 0;   // 
  14          
  15          /* Инициализация таймера(и его запуск) */
  16          void InCom_SPI_init_Timer(){
  17   1        TIMER0_MODE1_ENABLE;      // Режим - 16 битный таймер
  18   1        TH0 = FREQ_H;             // настройка частоты
  19   1        TL0 = FREQ_L;             // 
  20   1        set_ET0;                  // enable Timer0 interrupt
  21   1        set_EA;                   // enable interrupts
  22   1        set_TR0;                  // Timer0 run
  23   1      }
  24          
  25          /* запустить spi обмен пакета /пакетов */
  26          void InCom_SPI_exchange(void){
  27   1        InCom_SPI( 
  28   1          InCom_SPI_Output_in_buffer(
  29   1            &valueBufferArrayTx[0]),   // буффер для передачи
  30   1          &valueBufferArrayRx[0]);      // буффер для приема;
  31   1      }
  32          
  33          /* начать обмен( чтения и передача) */
  34          void InCom_SPI(bit valueMosi, unsigned char *outSideBuffer){ 
  35   1        int read = 33;                 // количество чтений линии MISO
  36   1        /******************************/
  37   1        if(counterBit == 0) {}  //  CPOL - имитация  (для slk)
  38   1        else {
  39   2          PIN_CLK_SPI =~ PIN_CLK_SPI; // каждый запуск(в таймере)менять состояние
  40   2        }
  41   1        if( PIN_CLK_SPI == 0) {       //  CPHA - имитация
  42   2        /******************************/
  43   2          switch(counterBit){   // Начало обмена    
  44   3            /*Последний бит пакета*/
  45   3            case BUFFER_SPI:          // Конец обмена 
  46   3              PIN_CS_SPI   = 1;
  47   3              PIN_MOSI_SPI = 1;
  48   3              PIN_MISO_SPI = 1;
  49   3              PIN_CLK_SPI  = 0;
  50   3              counterBit = 0;
  51   3              FlagInComSPIGlobal = 0; // Завершить все 
  52   3              break;
  53   3            /*Все остальные биты пакета*/
C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 17:12:02 PAGE 2   

  54   3            default:                            // Идет обмен   
  55   3              PIN_CS_SPI   = 0;
  56   3              if (valueMosi) {
  57   4              PIN_MOSI_SPI =1;
  58   4              } // отправка
  59   3              else{
  60   4              PIN_MOSI_SPI = 0;
  61   4              }
  62   3              // сделать for
  63   3              //for(read = 30; read > 0; read--){  // чтение
  64   3              while(read--){
  65   4                if ( PIN_MISO_SPI == 1){        // чтение
  66   5                  InCom_SPI_Input_in_buffer(outSideBuffer);
  67   5                } 
  68   4              }
  69   3              counterBit ++; // следующий бит
  70   3              break;
  71   3          }
  72   2        }
  73   1      }
  74          
  75          
  76          /* складывать в буфер приема прочитанный бит */
  77          void InCom_SPI_Input_in_buffer(unsigned char *outSideBuffer){
  78   1        unsigned char buf;
  79   1        buf = *outSideBuffer;
  80   1        if(counterBit == 0){                // начальный бит
  81   2          if(SPI_MSB){
  82   3            *outSideBuffer = (buf & 0xFE) << 7;   // младщий бит - установить на старший
  83   3            buf = buf >> 1;
  84   3            *outSideBuffer = *outSideBuffer | buf;
  85   3          }
  86   2          return;
  87   2        }
  88   1        if(counterBit < BUFFER_SPI){
  89   2          if(SPI_MSB){
  90   3            counterBit = counterBit - 1;
  91   3          }
  92   2          buf = buf + (0x01 << counterBit);
  93   2          if(SPI_MSB){
  94   3            counterBit++;
  95   3          }
  96   2          *outSideBuffer = buf; 
  97   2        }
  98   1      }
  99          
 100          
 101          /* читать из буфера передачи и отправить значение*/
 102          bit InCom_SPI_Output_in_buffer(unsigned char *outSideBuffer){
 103   1        unsigned char buf;
 104   1        buf = *outSideBuffer;  // сохранить текущее значение буфера для передачи
 105   1        if (counterBit == 0){         // получить 1 бит для отправки
 106   2          if(SPI_MSB){ buf = buf & 0x01; }  // маска для MSB
 107   2          else       { buf = buf & 0x80; }  // маска для LSB
 108   2        }
 109   1        if( counterBit < 8 && counterBit != 0){ // последующие биты для отправки 
 110   2          buf = buf & (0x01 << counterBit);
 111   2        }
 112   1        if(buf) { return 1; } else { return 0; } // если 0x00 =>0,а если нет =>1
 113   1      }
 114          
 115          /* установить значение clk */
C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 17:12:02 PAGE 3   

 116          void InCom_SPI_CLK_init(bit init){ PIN_CLK_SPI = init;}
 117          
*** WARNING C294 IN LINE 107 OF Code\Source\Interface_com.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    290    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
