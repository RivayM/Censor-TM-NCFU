C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 15:44:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERFACE_COM
OBJECT MODULE PLACED IN .\Code\Obj\Interface_com.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\Interface_com.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nu
                    -voton;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\I
                    -nterface_com.lst) TABS(2) OBJECT(.\Code\Obj\Interface_com.obj)

line level    source

   1          //********************************************************
   2          //  Interface common
   3          //********************************************************
   4          #include <Interface_com.H>
   5          #include <N76E003.H>
   6          
   7          unsigned char valueBufferArrayTx
   8            [BUFFER_SPI_MASSIV_SIZE];  // прочитать можно только тогда
   9          unsigned char valueBufferArrayRx
  10            [BUFFER_SPI_MASSIV_SIZE];  // когда обмен закончен(размер +1)
  11          
  12          int amountByteArrayForSend = BUFFER_SPI_MASSIV_SIZE; // количество байт которое надо отправить
  13          int counterBit             = 0;   // использовать в interrupt 1
  14          int counterByte            = 0;
  15          bit FlagInComSPIGlobal     = 0;   // 
  16          
  17          /* Инициализация таймера(и его запуск) */
  18          void InCom_SPI_init_Timer(){
  19   1        TIMER0_MODE1_ENABLE;      // Режим - 16 битный таймер
  20   1        TH0 = FREQ_H;             // настройка частоты
  21   1        TL0 = FREQ_L;             // 
  22   1        set_ET0;                  // enable Timer0 interrupt
  23   1        set_EA;                   // enable interrupts
  24   1        set_TR0;                  // Timer0 run
  25   1      }
  26          
  27          /* запустить spi обмен пакета /пакетов */
  28          void InCom_SPI_exchange(void){
  29   1        InCom_SPI( 
  30   1          InCom_SPI_Output_in_buffer(
  31   1            &valueBufferArrayTx[0]),   // буффер для передачи
  32   1          &valueBufferArrayRx[0]);      // буффер для приема;
  33   1      }
  34          
  35          /* начать обмен( чтения и передача) */
  36          void InCom_SPI(bit valueMosi, unsigned char *outSideBuffer){ 
  37   1        int read = 3;                 // количество чтений линии MISO
  38   1        /******************************/
  39   1        if( PIN_CLK_SPI == 0) {       //  CPHA - имитация
  40   2        /******************************/
  41   2          switch(counterBit){   // Начало обмена    
  42   3            /*Последний бит пакета*/
  43   3            case BUFFER_SPI:          // Конец обмена 
  44   3              PIN_CS_SPI   = 1;
  45   3              PIN_MOSI_SPI = 1;
  46   3              PIN_MISO_SPI = 1;
  47   3              PIN_CLK_SPI  = 0;
  48   3              FlagInComSPIGlobal = 0; // Завершить все 
  49   3              counterBit = 0;
  50   3              break;
  51   3            /*Все остальные биты пакета*/
  52   3            default:                            // Идет обмен   
  53   3              PIN_CS_SPI   = 0;
C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 15:44:20 PAGE 2   

  54   3              if (valueMosi) {PIN_MOSI_SPI =1;} // отправка
  55   3              else{PIN_MOSI_SPI = 0;}
  56   3              while(read--){                    // чтение
  57   4                if ( PIN_MISO_SPI == 1){        // если 1 ( записать)
  58   5                  InCom_SPI_Input_in_buffer(outSideBuffer);
  59   5                } 
  60   4              }
  61   3              counterBit ++; // следующий бит
  62   3              break;
  63   3          }
  64   2        }
  65   1        PIN_CLK_SPI =~ PIN_CLK_SPI; // каждый запуск(в таймере)менять состояние
  66   1      }
  67          
  68          
  69          /* складывать в буфер приема прочитанный бит */
  70          void InCom_SPI_Input_in_buffer(unsigned char *outSideBuffer){
  71   1        unsigned char buf;
  72   1        buf = *outSideBuffer;
  73   1        if(counterBit == 0){                // начальный бит
  74   2          if(SPI_MSB){
  75   3            *outSideBuffer = (buf & 0xFE) << 7;   // младщий бит - установить на старший
  76   3            buf = buf >> 1;
  77   3            *outSideBuffer = *outSideBuffer | buf;
  78   3          }
  79   2          return;
  80   2        }
  81   1        if(counterBit < BUFFER_SPI){
  82   2          if(SPI_MSB){
  83   3            counterBit = counterBit - 1;
  84   3          }
  85   2          buf = buf + (0x01 << counterBit);
  86   2          *outSideBuffer = buf; 
  87   2        }
  88   1      }
  89          
  90          
  91          /* читать из буфера передачи и отправить значение*/
  92          bit InCom_SPI_Output_in_buffer(unsigned char *outSideBuffer){
  93   1        unsigned char buf;
  94   1        buf = *outSideBuffer;  // сохранить текущее значение буфера для передачи
  95   1        if (counterBit == 0){         // получить 1 бит для отправки
  96   2          if(SPI_MSB){ buf = buf & 0x01; }  // маска для MSB
  97   2          else       { buf = buf & 0x80; }  // маска для LSB
  98   2        }
  99   1        if( counterBit < 8 && counterBit != 0){ // последующие биты для отправки 
 100   2          buf = buf & (0x01 << counterBit);
 101   2        }
 102   1        if(buf) { return 1; } else { return 0; } // если 0x00 =>0,а если нет =>1
 103   1      }
 104          
 105          /* установить значение clk */
 106          void InCom_SPI_CLK_init(bit init){ PIN_CLK_SPI = init;}
 107          
*** WARNING C294 IN LINE 97 OF Code\Source\Interface_com.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    275    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   INTERFACE_COM                                                     09/23/2024 15:44:20 PAGE 3   

   DATA SIZE        =     18       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
