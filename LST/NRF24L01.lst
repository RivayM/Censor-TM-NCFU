C51 COMPILER V9.53.0.0   NRF24L01                                                          09/23/2024 15:44:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Code\Obj\NRF24L01.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\NRF24L
                    -01.lst) TABS(2) OBJECT(.\Code\Obj\NRF24L01.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  NRF24L01 
   3          //********************************************************************************************************
             -***
   4          #include <GPIO.h>
   5          #include <N76E003.h>
   6          #include <CONFIG.h>
   7          #include <NRF24L01.h>
   8          //#include <Interface_com.H>
   9          
  10          int currentProgress = 0;
  11          /*
  12          unsigned char NRF_TX_ADDRESS[BUFFER_MASSIV_SIZE ] =
  13          {'i','n','t','e','r'};  // адрес передатчика
  14          unsigned char NRF_RX_ADDRESS[BUFFER_MASSIV_SIZE ] =
  15          {'m','a','r','k','1'};  // адрес приемника 
  16          
  17          */
  18          /* Выбор настройки модуля(и его запуск) */
  19          void NRF_Config(int mode){ 
  20   1        /*switch(mode){
  21   1          case TX_mode:  NRF_Setup_TX();  break;
  22   1          case RX_mode:  NRF_Setup_RX();  break;
  23   1          case RTX_mode: NRF_Setup_RTX(); break;
  24   1          default: break;
  25   1        }*/
  26   1      
  27   1      }
*** WARNING C280 IN LINE 19 OF Code\Source\NRF24L01.c: 'mode': unreferenced local variable
  28          
  29          /* Настройка модуля как передатчик */
  30          void NRF_Setup_TX(){  
  31   1        /*switch(currentProgress){
  32   1          case 0: NRF_CE = 0; break;
  33   1          case 1: NRF_Send_Byte(W_REG|CONFIG); break;  // Выбор регистра Config
  34   1          case 2: NRF_Send_Byte(0x0F); break;          // Отправка значения регистра
  35   1          */
  36   1          
  37   1          
  38   1      }
  39            
  40          /* Настройка модуля как приемние */
  41          void NRF_Setup_RX(){
  42   1        switch(currentProgress){
  43   2          case 0: NRF_CE = 0; break;
  44   2          case 1: /*функция*/break;
  45   2        }
  46   1      }
  47            
  48          /*void NRF_Setup_RTX(){}*/
  49          
  50          
C51 COMPILER V9.53.0.0   NRF24L01                                                          09/23/2024 15:44:20 PAGE 2   

  51            
  52          //  SPI_CE=0;                       
  53          //  Timer0_Delay100us(100);
  54          //  spi_WREG(W_REG|EN_AA,0x01);                             //Enable ShockBurst (Enable Auto ACK)    
  55          //  spi_WREG(W_REG|SETUP_AW,0x03);                          //Puts the address field width 5bytes  
  56          //  spi_WREG(W_REG|RF_CH,0x6E);                             //Set frequency channel 110 (2.510MHz)
  57          //  spi_WREG(W_REG|RF_SETUP,0x06);                          //Setup: 1Mbps, 0dBm, LNA off  
  58          //  spi_WREG(W_REG|EN_RXADDR,0x01);                         //Enable data pipe 0                  
  59          //  spi_WBUF(W_REG|RX_ADDR_P0,RX_ADDRESS,TX_ADD_WIDTH);   //Set static RX address for auto ack
  60          //  spi_WREG(W_REG|RX_PW_P0,TX_PLOAD_WIDTH);                //Set RX payload length
  61          //  spi_WREG(FLUSH_RX,NOP);                                 //Clear the RX_FIFO
  62          //  spi_WREG(FLUSH_TX,NOP);                    //Clear the TX_FIFO
  63          //  spi_WREG(W_REG|CONFIG,0x0F);    //Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabled  
  64          //  Timer0_Delay100us(5);
  65          //  SPI_CE=1;
  66          
  67          
  68          
  69          //  SPI_CE=0;    
  70          //  Timer0_Delay100us(100);
  71          //  spi_WREG(W_REG|CONFIG,0x0E);               //PRIM_RX : PTX
  72          //  clear_irq();
  73          //  spi_WREG(W_REG|EN_AA,0x01);                //Enable ShockBurst (Enable Auto ACK)
  74          //  spi_WREG(W_REG|EN_RXADDR,0x01);            //Enable data pipe 0
  75          //  spi_WREG(W_REG|SETUP_AW,0x03);             // Puts the address field width 5bytes
  76          //  spi_WREG(W_REG|SETUP_PETR,0x1A);           //Auto retransmit: wait 500us, 10 retries
  77          //  spi_WREG(W_REG|RF_CH,0x6E);                //Set frequency channel 110 (2.510MHz)
  78          //  spi_WREG(W_REG|RF_SETUP,0x06);             //Setup: 1Mbps, 0dBm, LNA off 
  79          //  //spi_WREG(W_REG|CONFIG,0x0E);             //Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & T
             -X_DS enabled 
  80          //  spi_WBUF(W_REG|TX_ADDR,TX_ADDRESS,TX_ADD_WIDTH);      //Set static TX address
  81          //  spi_WBUF(W_REG|RX_ADDR_P0,RX_ADDRESS,TX_ADD_WIDTH);   //Set static RX address for auto ack
  82          //  spi_WBUF(W_TX_PL,payload,TX_PLOAD_WIDTH);  //Write specified buffer to FIFO
  83          //  SPI_CE=1;
  84          //  Timer0_Delay100us(1);
  85          //  SPI_CE=0;
  86          //  get_status();
  87          //  spi_WREG(FLUSH_RX,NOP);                    //Clear the RX_FIFO
  88          //  spi_WREG(FLUSH_TX,NOP);                    //Clear the TX_FIFO
  89          
  90          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     17    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
