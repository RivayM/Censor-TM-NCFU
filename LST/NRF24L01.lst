C51 COMPILER V9.53.0.0   NRF24L01                                                          10/11/2024 14:52:36 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Code\Obj\NRF24L01.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\NRF24L
                    -01.lst) TABS(2) OBJECT(.\Code\Obj\NRF24L01.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  NRF24L01 
   3          //********************************************************************************************************
             -***
   4          #include <GPIO.h>
   5          #include <Interface_com.H>
   6          #include <NRF24L01.H>
   7          #include <N76E003.h>
   8          
   9          //**************************************************************************
  10          //  struct for send mode RX
  11          //**************************************************************************
  12          xdata struct NRF_PACKET_SPI packetRX = {
  13            /*reg:            ,value:   */
  14            {W_REG|NRF_CONFIG ,0x0F},   //  CONFIG
  15            {W_REG|EN_AA      ,0x3f},   //  EN_AA
  16            {W_REG|SETUP_AW   ,0x03},   //  SETUP_AW
  17            {W_REG|RF_CH      ,0x6E},   //  RF_CH   
  18            {W_REG|RF_SETUP   ,0x05},   //  RF_SETUP
  19            {W_REG|EN_RXADDR  ,0x1F},   //  EN_RXADDR   
  20            {W_REG|DYNPD      ,0x00},   //  DYNPD
  21            {W_REG|FEATURE    ,0x00},   //  FEATURE
  22            
  23            {W_REG|RX_PW_P0   ,0x01},   //  RX_PW_P0
  24            {W_REG|RX_PW_P1   ,0x01},   //  RX_PW_P0
  25            {W_REG|RX_PW_P2   ,0x01},   //  RX_PW_P0
  26            {W_REG|RX_PW_P3   ,0x01},   //  RX_PW_P0
  27            {W_REG|RX_PW_P4   ,0x01},   //  RX_PW_P0
  28            {W_REG|RX_PW_P5   ,0x01},   //  RX_PW_P0
  29            //adr write lsbyte first
  30            {W_REG|TX_ADDR    ,'X','X','X','X','X'},  //  TX_ADDR 
  31            
  32            {W_REG|RX_ADDR_P0 ,'X','X','X','X','X'},  //  RX_ADDR0
  33            {W_REG|RX_ADDR_P1 ,'V','V','V','V','V'},  //  RX_ADDR0
  34            {W_REG|RX_ADDR_P2 ,'q'},                  //  RX_ADDR0
  35            {W_REG|RX_ADDR_P3 ,'w'},                  //  RX_ADDR0
  36            {W_REG|RX_ADDR_P4 ,'e'},                  //  RX_ADDR0
  37            {W_REG|RX_ADDR_P5 ,'i'},                  //  RX_ADDR0
  38            
  39            {FLUSH_RX         ,NOP}     //  FLUSH   
  40          };
  41          
  42          xdata struct NRF_PACKET_SPI packetRX_READ = {
  43            /*reg:            ,value:   */
  44            {R_REG|NRF_CONFIG },    //  CONFIG
  45            {R_REG|EN_AA      },    //  EN_AA
  46            {R_REG|SETUP_AW   },    //  SETUP_AW
  47            {R_REG|RF_CH      },    //  RF_CH   
  48            {R_REG|RF_SETUP   },    //  RF_SETUP
  49            {R_REG|EN_RXADDR  },    //  EN_RXADDR   
  50            {R_REG|DYNPD      },    //  DYNPD
  51            {R_REG|FEATURE    },    //  FEATURE
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/11/2024 14:52:36 PAGE 2   

  52            
  53            {R_REG|RX_PW_P0   },    //  RX_PW_P0
  54            {R_REG|RX_PW_P1   },    //  RX_PW_P0
  55            {R_REG|RX_PW_P2   },    //  RX_PW_P0
  56            {R_REG|RX_PW_P3   },    //  RX_PW_P0
  57            {R_REG|RX_PW_P4   },    //  RX_PW_P0
  58            {R_REG|RX_PW_P5   },    //  RX_PW_P0
  59            {R_REG|TX_ADDR    },    //  TX_ADDR 
  60            
  61            {R_REG|RX_ADDR_P0 },    //  RX_ADDR0
  62            {R_REG|RX_ADDR_P1 },    //  RX_ADDR0
  63            {R_REG|RX_ADDR_P2 },    //  RX_ADDR0
  64            {R_REG|RX_ADDR_P3 },    //  RX_ADDR0
  65            {R_REG|RX_ADDR_P4 },    //  RX_ADDR0
  66            {R_REG|RX_ADDR_P5 },    //  RX_ADDR0
  67            
  68            {FLUSH_RX         }     //  FLUSH   
  69          };
  70          
  71          
  72          
  73          //**************************************************************************
  74          //  struct for send mode TX
  75          //**************************************************************************
  76          xdata struct NRF_PACKET_SPI packetTX = {
  77            /*reg:            ,value:   */
  78            {W_REG|NRF_CONFIG ,0x0E},   //  CONFIG
  79          
  80          };
  81          
  82          //**************************************************************************
  83          // NRF24L01
  84          //**************************************************************************
  85          
  86          bit FlagDataReadReady = 0;
  87          int currentProcess = 0;
  88          
  89          int test = 1;
  90          //**************************************************************************
  91          // ARRAY
  92          //**************************************************************************
  93          
  94          xdata unsigned char readBuf[NRF_MASSIV_SIZE]={0x00}; 
  95          xdata unsigned char COMMAND_SEND_RF[NRF_MASSIV_SIZE] = 
  96              {W_TX_PL /*next byte for data send[1-x]*/};
  97          xdata unsigned char COMMAND_READ_RF[NRF_MASSIV_SIZE] = 
  98              {R_RX_PL,0xFF,0xFF};
  99          xdata unsigned char COMMAND_CLEAR_FLUSH_RX[NRF_MASSIV_SIZE] = 
 100              {FLUSH_RX};
 101          xdata unsigned char COMMAND_CLEAR_FLUSH_TX[NRF_MASSIV_SIZE] = 
 102              {FLUSH_TX};
 103          xdata unsigned char COMMAND_CLEAR_IRQ[NRF_MASSIV_SIZE] = 
 104              {W_REG|STATUS,0x70};
 105          xdata unsigned char COMMAND_READ_PIPE0[NRF_MASSIV_SIZE] = 
 106              {RX_PW_P0};     
 107          xdata unsigned char COMMAND_READ_FIFO_STATUS[NRF_MASSIV_SIZE] = 
 108              {FIFO_STATUS};    
 109          xdata unsigned char COMMAND_W_ACK_PAYLOAD[NRF_MASSIV_SIZE] = 
 110              {W_ACK_PL | /*PPP*/ 0x00};    
 111          
 112          /*initialization RF*/
 113          bit NRF_init(struct NRF_PACKET_SPI *packet){
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/11/2024 14:52:36 PAGE 3   

 114   1        switch(currentProcess){
 115   2          case START_PROCESS: NRF_CE = 0;                 break;
 116   2          
 117   2          case 1: /*Send_SPI_NRF( packet->vCONFIG,    2 );*/  break;
 118   2          case 2: NRF_delay();                            break;
 119   2          case 3: Send_SPI_NRF( packet->vEN_AA,     2 );  break;
 120   2          case 4: Send_SPI_NRF( packet->vSETUP_AW,  2 );  break;  
 121   2          case 5: Send_SPI_NRF( packet->vRF_CH,     2 );  break;  
 122   2          case 6: Send_SPI_NRF( packet->vRF_SETUP,  2 );  break;  
 123   2          case 7: Send_SPI_NRF( packet->vEN_RXADDR, 2 );  break;
 124   2          case 8: Send_SPI_NRF( packet->vDYNPD,     2 );  break;  
 125   2          case 9: Send_SPI_NRF( packet->vFEATURE,   2 );  break;
 126   2          
 127   2          case 10:Send_SPI_NRF( packet->vTX_ADDR,   6 );  break;
 128   2      
 129   2          case 11:Send_SPI_NRF( packet->vRX_PW_P0,  2 );  break;
 130   2          case 12:Send_SPI_NRF( packet->vRX_PW_P1,  2 );  break;
 131   2          case 13:Send_SPI_NRF( packet->vRX_PW_P2,  2 );  break;
 132   2          case 14:Send_SPI_NRF( packet->vRX_PW_P3,  2 );  break;
 133   2          case 15:Send_SPI_NRF( packet->vRX_PW_P4,  2 );  break;
 134   2          case 16:Send_SPI_NRF( packet->vRX_PW_P5,  2 );  break;
 135   2          
 136   2          case 17:Send_SPI_NRF( packet->vRX_ADDR0,  6 );  break;
 137   2          case 18:Send_SPI_NRF( packet->vRX_ADDR1,  6 );  break;
 138   2          case 19:Send_SPI_NRF( packet->vRX_ADDR2,  2 );  break;
 139   2          case 20:Send_SPI_NRF( packet->vRX_ADDR3,  2 );  break;
 140   2          case 21:Send_SPI_NRF( packet->vRX_ADDR4,  2 );  break;
 141   2          case 22:Send_SPI_NRF( packet->vRX_ADDR5,  2 );  break;
 142   2          case 23:Send_SPI_NRF( packet->vCONFIG,    2 );  break;
 143   2          case 24: NRF_delay();                           break;
 144   2          
 145   2          case 25:NRF_CE = 1;                             break;
 146   2          case 26:currentProcess = END_PROCESS;           break;
 147   2          default: break;
 148   2        }
 149   1        return Check_Out();
 150   1      }
 151          
 152          /*NRF change mode to RX or TX */
 153          bit NRF_change_mode_RF(struct NRF_PACKET_SPI *packet, bit stateCeEnd){
 154   1        switch(currentProcess){
 155   2          case START_PROCESS: NRF_CE = 0;                 break;
 156   2          case 1: NRF_delay();                            break;
 157   2          case 2: Send_SPI_NRF( packet->vCONFIG,      2 );break;
 158   2          case 3: NRF_delay();                            break;
 159   2          case 4: NRF_CE = stateCeEnd;                    break;
 160   2          case 5: currentProcess = END_PROCESS;           break;
 161   2          default: break;
 162   2        }
 163   1        return Check_Out();
 164   1      }
 165          
 166          /*NRF send(radio) */
 167          bit NRF_send(/*struct DATA_PACKET_SEND *packet*/){
 168   1        switch(currentProcess){
 169   2          case START_PROCESS: NRF_CE = 0;               break;
 170   2          case 1: COMMAND_SEND_RF[1] =test;             break;    
 171   2          case 2: Send_SPI_NRF( &COMMAND_SEND_RF, 2 );  break;
 172   2          case 3: test++;
 173   2          case 4: NRF_CE = 1;                           break;
 174   2          case 5: NRF_delay();NRF_delay();NRF_delay();  break;
 175   2          case 6: NRF_CE = 0;                           break;  
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/11/2024 14:52:36 PAGE 4   

 176   2          case 7: currentProcess = END_PROCESS;         break;
 177   2          default: break;
 178   2        }
 179   1        return Check_Out();
 180   1      }
 181          
 182          /*NRF get(radio) */
 183          bit NRF_get(/*struct DATA_PACKET_SAVE *packet*/){
 184   1        switch(currentProcess){
 185   2          case START_PROCESS: /*NRF_CE = 1;*/   break;
 186   2          case 1: NRF_CE = 1;                   break;
 187   2          case 2: NRF_delay();                  break;
 188   2          case 3: /*NRF_CE = 0;*/               break;  
 189   2          case 4: 
 190   2            Send_SPI_NRF( &COMMAND_READ_RF, 2 );
 191   2            break;
 192   2          case 5: 
 193   2            Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX, 2 );
 194   2            break;
 195   2          case 6: 
 196   2            Send_SPI_NRF( &COMMAND_CLEAR_IRQ, 2 );
 197   2            break;
 198   2          case 9: currentProcess = END_PROCESS;break;
 199   2          default: break;
 200   2        }
 201   1        return Check_Out();
 202   1      } 
 203          
 204          
 205          
 206          /*send info for SPI*/
 207          void Send_SPI_NRF(unsigned char *message,int amountMessage){
 208   1        int i;
 209   1        for(i = 0; i <= amountMessage; i++){
 210   2          valueBufferArrayTx[i] = *(message + i);
 211   2        }   
 212   1        amountByteArrayForSend = amountMessage;
 213   1        InCom_SPI_start();            //start exchange
 214   1      }
 215          
 216          /* clear all flags*/    
 217          void NRF_clear_IRQ(void){
 218   1        Send_SPI_NRF(&COMMAND_CLEAR_IRQ,    2);   // Clear RX_DR, TX_DS, MAX_RT flags
 219   1      }
 220          
 221          /* ask the status*/ 
 222          void NRF_ack_status(void){
 223   1        unsigned char array[NRF_MASSIV_SIZE] =
 224   1          {STATUS};
 225   1        Send_SPI_NRF( array, 1 );   // read Status
 226   1      } 
 227          
 228          /* read last answer for spi*/ 
 229          void NRF_read_value(void){
 230   1        int i;
 231   1        for(i = 0; i < NRF_MASSIV_SIZE;i++){
 232   2          readBuf[i] = valueBufferArrayRx[i];
 233   2          //valueBufferArrayRx[i] = 0x00;         // forced zeroing
 234   2        }
 235   1      }
 236          
 237          /*check - end process?*/
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/11/2024 14:52:36 PAGE 5   

 238          bit Check_Out(){
 239   1        if(currentProcess == END_PROCESS){ 
 240   2          currentProcess = 0;
 241   2          return 1;
 242   2        }
 243   1        else {
 244   2          currentProcess++;
 245   2          return 0;
 246   2        }
 247   1      }
 248          
 249          /*NRF delay(wait)*/
 250          void NRF_delay(void){
 251   1        InCom_Set_Delay(DELAY);
 252   1      }
 253          
 254          
 255          
 256            
 257          
 258          
 259          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    770    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    450    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
