C51 COMPILER V9.53.0.0   NRF24L01                                                          10/08/2024 16:29:25 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Code\Obj\NRF24L01.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\NRF24L
                    -01.lst) TABS(2) OBJECT(.\Code\Obj\NRF24L01.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  NRF24L01 
   3          //********************************************************************************************************
             -***
   4          #include <GPIO.h>
   5          #include <Interface_com.H>
   6          #include <NRF24L01.H>
   7          #include <N76E003.h>
   8          
   9          //**************************************************************************
  10          //  struct for send mode RX
  11          //**************************************************************************
  12          xdata struct NRF_PACKET_SPI packetRX = {
  13            /*reg:            ,value:   */
  14            {W_REG|NRF_CONFIG ,0x0F},   //  CONFIG
  15            {W_REG|EN_AA      ,0x3f},   //  EN_AA
  16            {W_REG|SETUP_AW   ,0x03},   //  SETUP_AW
  17            {W_REG|RF_CH      ,0x4C},   //  RF_CH   
  18            {W_REG|RF_SETUP   ,0x0F},   //  RF_SETUP
  19            {W_REG|EN_RXADDR  ,0x02},   //  EN_RXADDR   
  20            {W_REG|DYNPD      ,0x03},   //  DYNPD
  21            {W_REG|FEATURE    ,0x06},   //  FEATURE
  22            
  23            {W_REG|RX_PW_P0   ,0x01},   //  RX_PW_P0
  24            {W_REG|RX_PW_P1   ,0x01},   //  RX_PW_P0
  25            {W_REG|RX_PW_P2   ,0x01},   //  RX_PW_P0
  26            {W_REG|RX_PW_P3   ,0x01},   //  RX_PW_P0
  27            {W_REG|RX_PW_P4   ,0x01},   //  RX_PW_P0
  28            {W_REG|RX_PW_P5   ,0x01},   //  RX_PW_P0
  29            //adr write lsbyte first
  30            {W_REG|TX_ADDR    ,'X','X','X','X','X'},  //  TX_ADDR 
  31            
  32            {W_REG|RX_ADDR_P0 ,'X','X','X','X','X'},  //  RX_ADDR0
  33            {W_REG|RX_ADDR_P1 ,'V','V','V','V','V'},  //  RX_ADDR0
  34            {W_REG|RX_ADDR_P2 ,'q'},                  //  RX_ADDR0
  35            {W_REG|RX_ADDR_P3 ,'w'},                  //  RX_ADDR0
  36            {W_REG|RX_ADDR_P4 ,'e'},                  //  RX_ADDR0
  37            {W_REG|RX_ADDR_P5 ,'i'},                  //  RX_ADDR0
  38            
  39            {FLUSH_RX         ,NOP}     //  FLUSH   
  40          };
  41          
  42          //**************************************************************************
  43          //  struct for send mode TX
  44          //**************************************************************************
  45          xdata struct NRF_PACKET_SPI packetTX;
  46          
  47          //**************************************************************************
  48          // NRF24L01
  49          //**************************************************************************
  50          
  51          bit FlagDataReadReady = 0;
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/08/2024 16:29:25 PAGE 2   

  52          int currentProcess = 0;
  53          //**************************************************************************
  54          // ARRAY
  55          //**************************************************************************
  56          
  57          xdata unsigned char readBuf[NRF_MASSIV_SIZE]={0x00}; 
  58          xdata unsigned char COMMAND_READ_RF[NRF_MASSIV_SIZE] = 
  59              {R_RX_PL};
  60          xdata unsigned char COMMAND_CLEAR_FLUSH_RX[NRF_MASSIV_SIZE] = 
  61              {FLUSH_RX};
  62          xdata unsigned char COMMAND_CLEAR_FLUSH_TX[NRF_MASSIV_SIZE] = 
  63              {FLUSH_TX};
  64          xdata unsigned char COMMAND_CLEAR_IRQ[NRF_MASSIV_SIZE] = 
  65              {W_REG|STATUS,0x70};
  66          xdata unsigned char COMMAND_READ_PIPE0[NRF_MASSIV_SIZE] = 
  67              {RX_PW_P0};     
  68          xdata unsigned char COMMAND_READ_FIFO_STATUS[NRF_MASSIV_SIZE] = 
  69              {FIFO_STATUS};    
  70          xdata unsigned char COMMAND_W_ACK_PAYLOAD[NRF_MASSIV_SIZE] = 
  71              {W_ACK_PL | /*PPP*/ 0x00};    
  72          
  73              
  74              
  75              
  76          /*initialization RF*/
  77          bit NRF_init(struct NRF_PACKET_SPI *packet){
  78   1        switch(currentProcess){
  79   2          case START_PROCESS: NRF_CE = 0;                 break;
  80   2          
  81   2          case 1: /*Send_SPI_NRF( packet->vCONFIG,    2 );*/  break;
  82   2          case 2: /*NRF_delay10();*/                          break;
  83   2          case 3: Send_SPI_NRF( packet->vEN_AA,     2 );  break;  
  84   2          case 4: Send_SPI_NRF( packet->vSETUP_AW,  2 );  break;  
  85   2          case 5: Send_SPI_NRF( packet->vRF_CH,     2 );  break;  
  86   2          case 6: Send_SPI_NRF( packet->vRF_SETUP,  2 );  break;  
  87   2          case 7: Send_SPI_NRF( packet->vEN_RXADDR, 2 );  break;
  88   2          case 8: Send_SPI_NRF( packet->vDYNPD,     2 );  break;  
  89   2          case 9: Send_SPI_NRF( packet->vFEATURE,   2 );  break;
  90   2          
  91   2          case 10:Send_SPI_NRF( packet->vTX_ADDR,   6 );  break;
  92   2      
  93   2          case 11:Send_SPI_NRF( packet->vRX_PW_P0,  2 );  break;
  94   2          case 12:Send_SPI_NRF( packet->vRX_PW_P1,  2 );  break;
  95   2          case 13:Send_SPI_NRF( packet->vRX_PW_P2,  2 );  break;
  96   2          case 14:Send_SPI_NRF( packet->vRX_PW_P3,  2 );  break;
  97   2          case 15:Send_SPI_NRF( packet->vRX_PW_P4,  2 );  break;
  98   2          case 16:Send_SPI_NRF( packet->vRX_PW_P5,  2 );  break;
  99   2          
 100   2          case 17:Send_SPI_NRF( packet->vRX_ADDR0,  6 );  break;
 101   2          case 18:Send_SPI_NRF( packet->vRX_ADDR1,  6 );  break;
 102   2          case 19:Send_SPI_NRF( packet->vRX_ADDR2,  2 );  break;
 103   2          case 20:Send_SPI_NRF( packet->vRX_ADDR3,  2 );  break;
 104   2          case 21:Send_SPI_NRF( packet->vRX_ADDR4,  2 );  break;
 105   2          case 22:Send_SPI_NRF( packet->vRX_ADDR5,  2 );  break;
 106   2          case 23:Send_SPI_NRF( packet->vCONFIG,    2 );  break;
 107   2          case 24: NRF_delay10();                         break;
 108   2          
 109   2          case 25:NRF_CE = 1;                             break;
 110   2          case 26:currentProcess = END_PROCESS;           break;
 111   2          default: break;
 112   2        }
 113   1        return Check_Out();
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/08/2024 16:29:25 PAGE 3   

 114   1      }
 115          
 116          /*NRF send(radio) */
 117          bit NRF_send(/*struct DATA_PACKET_SEND *packet*/){
 118   1        switch(currentProcess){
 119   2          case START_PROCESS: NRF_CE = 0;                 break;
 120   2          default: break;
 121   2        }
 122   1        //процесс очистки.
 123   1        // дергать сe ( как ардуино гдето 200микросекунд или более)
 124   1        //или попробовать ждать прерывание об окончании отправки пакета
 125   1        // и се= 0
 126   1        return Check_Out();
 127   1      }
 128          
 129          /*NRF get(radio) */
 130          bit NRF_get(/*struct DATA_PACKET_SAVE *packet*/){
 131   1        switch(currentProcess){
 132   2          case START_PROCESS: /*NRF_CE = 1;*/   break;
 133   2          case 1: NRF_CE = 1;                   break;
 134   2          case 2: /*NRF_delay10();*/            break;
 135   2          case 3: /*NRF_CE = 0;   */            break;  
 136   2          case 4: NRF_ack_status();             break;
 137   2          case 5:
 138   2            NRF_read_value();   
 139   2            COMMAND_W_ACK_PAYLOAD[0] = W_ACK_PL + (readBuf[0] & RX_P_NO); 
 140   2          case 6: 
 141   2            Send_SPI_NRF( &COMMAND_READ_RF, 2 );
 142   2            break;
 143   2          case 7:
 144   2            //записать обратно прочитнные байты
 145   2            NRF_read_value(); 
 146   2            COMMAND_W_ACK_PAYLOAD[1] = readBuf[1];
 147   2            // и так далее
 148   2            break;
 149   2          //ack вернуть тот же ответ???
 150   2          case 8: 
 151   2            Send_SPI_NRF(&COMMAND_W_ACK_PAYLOAD, 2);
 152   2            break;
 153   2          /*case 1: NRF_ack_status();           break; 
 154   2          case 2: NRF_CE = 1;                   break;
 155   2          case 3: NRF_delay10();                break;
 156   2          case 4: NRF_CE = 0;                   break;  
 157   2          case 5: Send_SPI_NRF( &COMMAND_CLEAR_IRQ,         2 );break;
 158   2          case 6: Send_SPI_NRF( &COMMAND_READ_RF,           2 );break;
 159   2          case 7: Send_SPI_NRF( &COMMAND_READ_FIFO_STATUS,  2 );break;*/
 160   2      /////////////////////////////////////////////////////////////////////
 161   2          /*case 1: 
 162   2            Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX,  2 );
 163   2            break;      
 164   2          case 2: 
 165   2            NRF_delay10(); 
 166   2            break;
 167   2          case 3: 
 168   2            Send_SPI_NRF( &COMMAND_CLEAR_IRQ,       2 );
 169   2            break;
 170   2          case 4: 
 171   2            NRF_ack_status();             
 172   2            break; 
 173   2          case 5: 
 174   2              Send_SPI_NRF( &COMMAND_READ_RF,       5 );
 175   2            break;*/
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/08/2024 16:29:25 PAGE 4   

 176   2      /////////////////////////////////////////////////////////////////////
 177   2          /*case 1: NRF_delay10();              break;  
 178   2          case 2: NRF_CE = 0;                   break;
 179   2          case 3: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_TX,  2 );break; 
 180   2          case 4: NRF_ack_status();             break; 
 181   2          case 5: NRF_read_value();             break;
 182   2          case 6: Send_SPI_NRF( &COMMAND_READ_RF,         5 );break;
 183   2          case 7: Send_SPI_NRF( &COMMAND_READ_PIPE0,      4 );break;  
 184   2          case 8: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX,  2 );break;      
 185   2          case 9: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_TX,  2 );break;      
 186   2          case 10:Send_SPI_NRF( &COMMAND_CLEAR_IRQ,       2 );break;
 187   2          case 11:NRF_CE = 1;                   break;
 188   2          case 12:NRF_delay10();                break;
 189   2          case 13: NRF_CE = 0;              break;  */
 190   2          case 9: currentProcess = END_PROCESS;break;
 191   2          default: break;
 192   2        }
 193   1        return Check_Out();
 194   1      } 
 195          
 196          /*send info for SPI*/
 197          void Send_SPI_NRF(unsigned char *message,int amountMessage){
 198   1        int i;
 199   1        for(i = 0; i <= amountMessage; i++){
 200   2          valueBufferArrayTx[i] = *(message + i);
 201   2        }   
 202   1        amountByteArrayForSend = amountMessage;
 203   1        InCom_SPI_start();            //start exchange
 204   1      }
 205          
 206          /* clear all flags*/    
 207          void NRF_clear_IRQ(void){
 208   1        Send_SPI_NRF(&COMMAND_CLEAR_IRQ,    2);   // Clear RX_DR, TX_DS, MAX_RT flags
 209   1      }
 210          
 211          /* ask the status*/ 
 212          void NRF_ack_status(void){
 213   1        unsigned char array[NRF_MASSIV_SIZE] =
 214   1          {STATUS};
 215   1        Send_SPI_NRF( array, 1 );   // read Status
 216   1      } 
 217          
 218          /* read last answer for spi*/ 
 219          void NRF_read_value(void){
 220   1        int i;
 221   1        for(i = 0; i < NRF_MASSIV_SIZE;i++){
 222   2          readBuf[i] = valueBufferArrayRx[i];
 223   2        }
 224   1      }
 225          
 226          /*check - end process?*/
 227          bit Check_Out(){
 228   1        if(currentProcess == END_PROCESS){ 
 229   2          currentProcess = 0;
 230   2          return 1;
 231   2        }
 232   1        else {
 233   2          currentProcess++;
 234   2          return 0;
 235   2        }
 236   1      }
 237          
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/08/2024 16:29:25 PAGE 5   

 238          /*NRF delay(wait)*/
 239          void NRF_delay10(void){
 240   1        InCom_Set_Delay(START_DELAY);
 241   1      }
 242          
 243          
 244          
 245            
 246          
 247          
 248          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    659    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    312    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
