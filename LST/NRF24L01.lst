C51 COMPILER V9.53.0.0   NRF24L01                                                          10/09/2024 15:05:16 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Code\Obj\NRF24L01.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\NRF24L
                    -01.lst) TABS(2) OBJECT(.\Code\Obj\NRF24L01.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  NRF24L01 
   3          //********************************************************************************************************
             -***
   4          #include <GPIO.h>
   5          #include <Interface_com.H>
   6          #include <NRF24L01.H>
   7          #include <N76E003.h>
   8          
   9          //**************************************************************************
  10          //  struct for send mode RX
  11          //**************************************************************************
  12          xdata struct NRF_PACKET_SPI packetRX = {
  13            /*reg:            ,value:   */
  14            {W_REG|NRF_CONFIG ,0x0F},   //  CONFIG
  15            {W_REG|EN_AA      ,0x3f},   //  EN_AA
  16            {W_REG|SETUP_AW   ,0x03},   //  SETUP_AW
  17            {W_REG|RF_CH      ,0x78},   //  RF_CH   
  18            {W_REG|RF_SETUP   ,0x07},   //  RF_SETUP
  19            {W_REG|EN_RXADDR  ,0x03},   //  EN_RXADDR   
  20            {W_REG|DYNPD      ,0x00},   //  DYNPD
  21            {W_REG|FEATURE    ,0x00},   //  FEATURE
  22            
  23            {W_REG|RX_PW_P0   ,0x01},   //  RX_PW_P0
  24            {W_REG|RX_PW_P1   ,0x01},   //  RX_PW_P0
  25            {W_REG|RX_PW_P2   ,0x01},   //  RX_PW_P0
  26            {W_REG|RX_PW_P3   ,0x01},   //  RX_PW_P0
  27            {W_REG|RX_PW_P4   ,0x01},   //  RX_PW_P0
  28            {W_REG|RX_PW_P5   ,0x01},   //  RX_PW_P0
  29            //adr write lsbyte first
  30            {W_REG|TX_ADDR    ,'X','X','X','X','X'},  //  TX_ADDR 
  31            
  32            {W_REG|RX_ADDR_P0 ,'X','X','X','X','X'},  //  RX_ADDR0
  33            {W_REG|RX_ADDR_P1 ,'V','V','V','V','V'},  //  RX_ADDR0
  34            {W_REG|RX_ADDR_P2 ,'q'},                  //  RX_ADDR0
  35            {W_REG|RX_ADDR_P3 ,'w'},                  //  RX_ADDR0
  36            {W_REG|RX_ADDR_P4 ,'e'},                  //  RX_ADDR0
  37            {W_REG|RX_ADDR_P5 ,'i'},                  //  RX_ADDR0
  38            
  39            {FLUSH_RX         ,NOP}     //  FLUSH   
  40          };
  41          
  42          xdata struct NRF_PACKET_SPI packetRX_READ = {
  43            /*reg:            ,value:   */
  44            {W_REG|NRF_CONFIG ,0x0F},   //  CONFIG
  45            {W_REG|EN_AA      ,0x3f},   //  EN_AA
  46            {W_REG|SETUP_AW   ,0x03},   //  SETUP_AW
  47            {W_REG|RF_CH      ,0x78},   //  RF_CH   
  48            {W_REG|RF_SETUP   ,0x07},   //  RF_SETUP
  49            {W_REG|EN_RXADDR  ,0x03},   //  EN_RXADDR   
  50            {W_REG|DYNPD      ,0x00},   //  DYNPD
  51            {W_REG|FEATURE    ,0x00},   //  FEATURE
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/09/2024 15:05:16 PAGE 2   

  52            
  53            {W_REG|RX_PW_P0   ,0x01},   //  RX_PW_P0
  54            {W_REG|RX_PW_P1   ,0x01},   //  RX_PW_P0
  55            {W_REG|RX_PW_P2   ,0x01},   //  RX_PW_P0
  56            {W_REG|RX_PW_P3   ,0x01},   //  RX_PW_P0
  57            {W_REG|RX_PW_P4   ,0x01},   //  RX_PW_P0
  58            {W_REG|RX_PW_P5   ,0x01},   //  RX_PW_P0
  59            //adr write lsbyte first
  60            {W_REG|TX_ADDR    ,'X','X','X','X','X'},  //  TX_ADDR 
  61            
  62            {W_REG|RX_ADDR_P0 ,'X','X','X','X','X'},  //  RX_ADDR0
  63            {W_REG|RX_ADDR_P1 ,'V','V','V','V','V'},  //  RX_ADDR0
  64            {W_REG|RX_ADDR_P2 ,'q'},                  //  RX_ADDR0
  65            {W_REG|RX_ADDR_P3 ,'w'},                  //  RX_ADDR0
  66            {W_REG|RX_ADDR_P4 ,'e'},                  //  RX_ADDR0
  67            {W_REG|RX_ADDR_P5 ,'i'},                  //  RX_ADDR0
  68            
  69            {FLUSH_RX         ,NOP}     //  FLUSH   
  70          };
  71          
  72          
  73          
  74          //**************************************************************************
  75          //  struct for send mode TX
  76          //**************************************************************************
  77          xdata struct NRF_PACKET_SPI packetTX;
  78          
  79          //**************************************************************************
  80          // NRF24L01
  81          //**************************************************************************
  82          
  83          bit FlagDataReadReady = 0;
  84          int currentProcess = 0;
  85          //**************************************************************************
  86          // ARRAY
  87          //**************************************************************************
  88          
  89          xdata unsigned char readBuf[NRF_MASSIV_SIZE]={0x00}; 
  90          xdata unsigned char COMMAND_READ_RF[NRF_MASSIV_SIZE] = 
  91              {R_RX_PL};
  92          xdata unsigned char COMMAND_CLEAR_FLUSH_RX[NRF_MASSIV_SIZE] = 
  93              {FLUSH_RX};
  94          xdata unsigned char COMMAND_CLEAR_FLUSH_TX[NRF_MASSIV_SIZE] = 
  95              {FLUSH_TX};
  96          xdata unsigned char COMMAND_CLEAR_IRQ[NRF_MASSIV_SIZE] = 
  97              {W_REG|STATUS,0x70};
  98          xdata unsigned char COMMAND_READ_PIPE0[NRF_MASSIV_SIZE] = 
  99              {RX_PW_P0};     
 100          xdata unsigned char COMMAND_READ_FIFO_STATUS[NRF_MASSIV_SIZE] = 
 101              {FIFO_STATUS};    
 102          xdata unsigned char COMMAND_W_ACK_PAYLOAD[NRF_MASSIV_SIZE] = 
 103              {W_ACK_PL | /*PPP*/ 0x00};    
 104          
 105              
 106              
 107              
 108          /*initialization RF*/
 109          bit NRF_init(struct NRF_PACKET_SPI *packet){
 110   1        switch(currentProcess){
 111   2          case START_PROCESS: NRF_CE = 0;                 break;
 112   2          
 113   2          case 1: /*Send_SPI_NRF( packet->vCONFIG,    2 );*/  break;
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/09/2024 15:05:16 PAGE 3   

 114   2          case 2: NRF_delay10();                          break;
 115   2          case 3: Send_SPI_NRF( packet->vEN_AA,     2 );  break;
 116   2          case 4: Send_SPI_NRF( packet->vSETUP_AW,  2 );  break;  
 117   2          case 5: Send_SPI_NRF( packet->vRF_CH,     2 );  break;  
 118   2          case 6: Send_SPI_NRF( packet->vRF_SETUP,  2 );  break;  
 119   2          case 7: Send_SPI_NRF( packet->vEN_RXADDR, 2 );  break;
 120   2          case 8: Send_SPI_NRF( packet->vDYNPD,     2 );  break;  
 121   2          case 9: Send_SPI_NRF( packet->vFEATURE,   2 );  break;
 122   2          
 123   2          case 10:Send_SPI_NRF( packet->vTX_ADDR,   6 );  break;
 124   2      
 125   2          case 11:Send_SPI_NRF( packet->vRX_PW_P0,  2 );  break;
 126   2          case 12:Send_SPI_NRF( packet->vRX_PW_P1,  2 );  break;
 127   2          case 13:Send_SPI_NRF( packet->vRX_PW_P2,  2 );  break;
 128   2          case 14:Send_SPI_NRF( packet->vRX_PW_P3,  2 );  break;
 129   2          case 15:Send_SPI_NRF( packet->vRX_PW_P4,  2 );  break;
 130   2          case 16:Send_SPI_NRF( packet->vRX_PW_P5,  2 );  break;
 131   2          
 132   2          case 17:Send_SPI_NRF( packet->vRX_ADDR0,  6 );  break;
 133   2          case 18:Send_SPI_NRF( packet->vRX_ADDR1,  6 );  break;
 134   2          case 19:Send_SPI_NRF( packet->vRX_ADDR2,  2 );  break;
 135   2          case 20:Send_SPI_NRF( packet->vRX_ADDR3,  2 );  break;
 136   2          case 21:Send_SPI_NRF( packet->vRX_ADDR4,  2 );  break;
 137   2          case 22:Send_SPI_NRF( packet->vRX_ADDR5,  2 );  break;
 138   2          case 23:Send_SPI_NRF( packet->vCONFIG,    2 );  break;
 139   2          case 24: NRF_delay10();                         break;
 140   2          
 141   2          case 25:NRF_CE = 1;                             break;
 142   2          case 26:currentProcess = END_PROCESS;           break;
 143   2          default: break;
 144   2        }
 145   1        return Check_Out();
 146   1      }
 147          
 148          /*NRF send(radio) */
 149          bit NRF_send(/*struct DATA_PACKET_SEND *packet*/){
 150   1        switch(currentProcess){
 151   2          case START_PROCESS: NRF_CE = 0;                 break;
 152   2          default: break;
 153   2        }
 154   1        //процесс очистки.
 155   1        // дергать сe ( как ардуино гдето 200микросекунд или более)
 156   1        //или попробовать ждать прерывание об окончании отправки пакета
 157   1        // и се= 0
 158   1        return Check_Out();
 159   1      }
 160          
 161          /*NRF get(radio) */
 162          bit NRF_get(/*struct DATA_PACKET_SAVE *packet*/){
 163   1        switch(currentProcess){
 164   2          case START_PROCESS: /*NRF_CE = 1;*/   break;
 165   2          case 1: NRF_CE = 1;                   break;
 166   2          case 2: NRF_delay10();                break;
 167   2          case 3: /*NRF_CE = 0;*/               break;  
 168   2          case 4: 
 169   2            NRF_ack_status(); 
 170   2            NRF_read_value(); 
 171   2            break;
 172   2          case 5:
 173   2            // W_ACK_PL -> [0] = 10101PPP     
 174   2            //COMMAND_W_ACK_PAYLOAD[0] = W_ACK_PL + ((readBuf[0] & RX_P_NO) >> 1);
 175   2            //COMMAND_W_ACK_PAYLOAD[1] = (readBuf[0] & RX_P_NO) >> 1;
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/09/2024 15:05:16 PAGE 4   

 176   2          case 6: 
 177   2            Send_SPI_NRF( &COMMAND_READ_RF, 3 );
 178   2            NRF_read_value(); 
 179   2            break;
 180   2          case 7:
 181   2            //записать обратно прочитнные байты
 182   2            //COMMAND_W_ACK_PAYLOAD[2] = 0x01;
 183   2            // и так далее
 184   2            break;
 185   2          //ack вернуть тот же ответ???
 186   2          case 8: 
 187   2            //Send_SPI_NRF(&COMMAND_W_ACK_PAYLOAD, 3);
 188   2            break;
 189   2          /*case 1: NRF_ack_status();           break; 
 190   2          case 2: NRF_CE = 1;                   break;
 191   2          case 3: NRF_delay10();                break;
 192   2          case 4: NRF_CE = 0;                   break;  
 193   2          case 5: Send_SPI_NRF( &COMMAND_CLEAR_IRQ,         2 );break;
 194   2          case 6: Send_SPI_NRF( &COMMAND_READ_RF,           2 );break;
 195   2          case 7: Send_SPI_NRF( &COMMAND_READ_FIFO_STATUS,  2 );break;*/
 196   2      /////////////////////////////////////////////////////////////////////
 197   2          /*case 1: 
 198   2            Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX,  2 );
 199   2            break;      
 200   2          case 2: 
 201   2            NRF_delay10(); 
 202   2            break;
 203   2          case 3: 
 204   2            Send_SPI_NRF( &COMMAND_CLEAR_IRQ,       2 );
 205   2            break;
 206   2          case 4: 
 207   2            NRF_ack_status();             
 208   2            break; 
 209   2          case 5: 
 210   2              Send_SPI_NRF( &COMMAND_READ_RF,       5 );
 211   2            break;*/
 212   2      /////////////////////////////////////////////////////////////////////
 213   2          /*case 1: NRF_delay10();              break;  
 214   2          case 2: NRF_CE = 0;                   break;
 215   2          case 3: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_TX,  2 );break; 
 216   2          case 4: NRF_ack_status();             break; 
 217   2          case 5: NRF_read_value();             break;
 218   2          case 6: Send_SPI_NRF( &COMMAND_READ_RF,         5 );break;
 219   2          case 7: Send_SPI_NRF( &COMMAND_READ_PIPE0,      4 );break;  
 220   2          case 8: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX,  2 );break;      
 221   2          case 9: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_TX,  2 );break;      
 222   2          case 10:Send_SPI_NRF( &COMMAND_CLEAR_IRQ,       2 );break;
 223   2          case 11:NRF_CE = 1;                   break;
 224   2          case 12:NRF_delay10();                break;
 225   2          case 13: NRF_CE = 0;              break;  */
 226   2          case 9: currentProcess = END_PROCESS;break;
 227   2          default: break;
 228   2        }
 229   1        return Check_Out();
 230   1      } 
 231          
 232          /*send info for SPI*/
 233          void Send_SPI_NRF(unsigned char *message,int amountMessage){
 234   1        int i;
 235   1        for(i = 0; i <= amountMessage; i++){
 236   2          valueBufferArrayTx[i] = *(message + i);
 237   2        }   
C51 COMPILER V9.53.0.0   NRF24L01                                                          10/09/2024 15:05:16 PAGE 5   

 238   1        amountByteArrayForSend = amountMessage;
 239   1        InCom_SPI_start();            //start exchange
 240   1      }
 241          
 242          /* clear all flags*/    
 243          void NRF_clear_IRQ(void){
 244   1        Send_SPI_NRF(&COMMAND_CLEAR_IRQ,    2);   // Clear RX_DR, TX_DS, MAX_RT flags
 245   1      }
 246          
 247          /* ask the status*/ 
 248          void NRF_ack_status(void){
 249   1        unsigned char array[NRF_MASSIV_SIZE] =
 250   1          {STATUS};
 251   1        Send_SPI_NRF( array, 1 );   // read Status
 252   1      } 
 253          
 254          /* read last answer for spi*/ 
 255          void NRF_read_value(void){
 256   1        int i;
 257   1        for(i = 0; i < NRF_MASSIV_SIZE;i++){
 258   2          readBuf[i] = valueBufferArrayRx[i];
 259   2          //valueBufferArrayRx[i] = 0x00;         // forced zeroing
 260   2        }
 261   1      }
 262          
 263          /*check - end process?*/
 264          bit Check_Out(){
 265   1        if(currentProcess == END_PROCESS){ 
 266   2          currentProcess = 0;
 267   2          return 1;
 268   2        }
 269   1        else {
 270   2          currentProcess++;
 271   2          return 0;
 272   2        }
 273   1      }
 274          
 275          /*NRF delay(wait)*/
 276          void NRF_delay10(void){
 277   1        InCom_Set_Delay(START_DELAY);
 278   1      }
 279          
 280          
 281          
 282            
 283          
 284          
 285          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    609    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    444    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
