C51 COMPILER V9.53.0.0   NRF24L01                                                          11/22/2024 15:53:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Code\Obj\NRF24L01.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\NRF24L
                    -01.lst) TABS(2) OBJECT(.\Code\Obj\NRF24L01.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  NRF24L01 
   3          //********************************************************************************************************
             -***
   4          #include <GPIO.h>
   5          #include <SPI_prog.h>
   6          #include <NRF24L01.h>
   7          #include <N76E003.h>
   8          #include <CONFIG.h>
   9          
  10          //**************************************************************************
  11          /*  MODE NRF    */
  12          //**************************************************************************
  13          
  14          bit modeRF = RX_MODE;  
  15          
  16          //**************************************************************************
  17          /*  struct for send mode RX     */
  18          //**************************************************************************
  19          xdata struct NRF_PACKET_SPI packetRX = {
  20            /*reg:            ,value:   */
  21            {W_REG|NRF_CONFIG ,0x0F},   //  CONFIG
  22            {W_REG|EN_AA      ,0x00},   //  EN_AA
  23            {W_REG|SETUP_AW   ,0x03},   //  SETUP_AW
  24            {W_REG|RF_CH      ,0x6E},   //  RF_CH   
  25            {W_REG|RF_SETUP   ,0x05},   //  RF_SETUP
  26            {W_REG|EN_RXADDR  ,0x1F},   //  EN_RXADDR   
  27            {W_REG|DYNPD      ,0x00},   //  DYNPD
  28            {W_REG|FEATURE    ,0x00},   //  FEATURE
  29            
  30            {W_REG|RX_PW_P0   ,0x01},   //  RX_PW_P0
  31            {W_REG|RX_PW_P1   ,0x01},   //  RX_PW_P0
  32            {W_REG|RX_PW_P2   ,0x01},   //  RX_PW_P0
  33            {W_REG|RX_PW_P3   ,0x01},   //  RX_PW_P0
  34            {W_REG|RX_PW_P4   ,0x01},   //  RX_PW_P0
  35            {W_REG|RX_PW_P5   ,0x01},   //  RX_PW_P0
  36            //adr write lsbyte first
  37            {W_REG|TX_ADDR    ,'X','X','X','X','X'},  //  TX_ADDR 
  38            
  39            {W_REG|RX_ADDR_P0 ,'X','X','X','X','X'},  //  RX_ADDR0
  40            {W_REG|RX_ADDR_P1 ,'V','V','V','V','V'},  //  RX_ADDR0
  41            {W_REG|RX_ADDR_P2 ,'q'},                  //  RX_ADDR0
  42            {W_REG|RX_ADDR_P3 ,'w'},                  //  RX_ADDR0
  43            {W_REG|RX_ADDR_P4 ,'e'},                  //  RX_ADDR0
  44            {W_REG|RX_ADDR_P5 ,'i'},                  //  RX_ADDR0
  45            
  46            {FLUSH_RX         ,NOP}     //  FLUSH   
  47          };
  48          //**************************************************************************
  49          /*  struct for send mode TX     */
  50          //**************************************************************************
  51          xdata struct NRF_PACKET_SPI packetTX = {
C51 COMPILER V9.53.0.0   NRF24L01                                                          11/22/2024 15:53:04 PAGE 2   

  52            /*reg:            ,value:   */
  53            {W_REG|NRF_CONFIG ,0x0E},   //  CONFIG
  54          };
  55          //**************************************************************************
  56          /*  struct for READ state reg   */
  57          //**************************************************************************
  58          xdata struct NRF_PACKET_SPI packetREAD = {
  59            /*reg:            ,value:   */
  60            {R_REG|NRF_CONFIG },    //  CONFIG
  61            {R_REG|EN_AA      },    //  EN_AA
  62            {R_REG|SETUP_AW   },    //  SETUP_AW
  63            {R_REG|RF_CH      },    //  RF_CH   
  64            {R_REG|RF_SETUP   },    //  RF_SETUP
  65            {R_REG|EN_RXADDR  },    //  EN_RXADDR   
  66            {R_REG|DYNPD      },    //  DYNPD
  67            {R_REG|FEATURE    },    //  FEATURE
  68            
  69            {R_REG|RX_PW_P0   },    //  RX_PW_P0
  70            {R_REG|RX_PW_P1   },    //  RX_PW_P0
  71            {R_REG|RX_PW_P2   },    //  RX_PW_P0
  72            {R_REG|RX_PW_P3   },    //  RX_PW_P0
  73            {R_REG|RX_PW_P4   },    //  RX_PW_P0
  74            {R_REG|RX_PW_P5   },    //  RX_PW_P0
  75            {R_REG|TX_ADDR    },    //  TX_ADDR 
  76            
  77            {R_REG|RX_ADDR_P0 },    //  RX_ADDR0
  78            {R_REG|RX_ADDR_P1 },    //  RX_ADDR0
  79            {R_REG|RX_ADDR_P2 },    //  RX_ADDR0
  80            {R_REG|RX_ADDR_P3 },    //  RX_ADDR0
  81            {R_REG|RX_ADDR_P4 },    //  RX_ADDR0
  82            {R_REG|RX_ADDR_P5 },    //  RX_ADDR0
  83            
  84            {FLUSH_RX         }     //  FLUSH   
  85          };
  86          
  87          //**************************************************************************
  88          /* ARRAY                        */
  89          //**************************************************************************
  90          xdata unsigned char COMMAND_STAT          [NRF_MASSIV_SIZE] = 
  91              {STATUS};
  92          xdata unsigned char COMMAND_SEND_RF       [NRF_MASSIV_SIZE] = 
  93              {W_TX_PL /*next byte for data send[1-x]*/};
  94          xdata unsigned char COMMAND_READ_RF       [NRF_MASSIV_SIZE] = 
  95              {R_RX_PL};
  96          xdata unsigned char COMMAND_CLEAR_FLUSH_RX[NRF_MASSIV_SIZE] = 
  97              {FLUSH_RX};
  98          xdata unsigned char COMMAND_CLEAR_FLUSH_TX[NRF_MASSIV_SIZE] = 
  99              {FLUSH_TX};
 100          xdata unsigned char COMMAND_CLEAR_IRQ     [NRF_MASSIV_SIZE] = 
 101              {W_REG|STATUS,0x70};
 102          xdata unsigned char COMMAND_READ_PIPE0    [NRF_MASSIV_SIZE] = 
 103              {RX_PW_P0};     
 104          xdata unsigned char COMMAND_READ_FIFO_STAT[NRF_MASSIV_SIZE] = 
 105              {FIFO_STATUS};    
 106          xdata unsigned char COMMAND_W_ACK_PAYLOAD [NRF_MASSIV_SIZE] = 
 107              {W_ACK_PL + /*need get(in status) ->PPP*/ 0x00};  
 108              
 109          //**************************************************************************
 110          /* NRF24L01 additional        */
 111          //**************************************************************************
 112          
 113          pdata unsigned char readBuf[NRF_MASSIV_SIZE]={0x00}; 
C51 COMPILER V9.53.0.0   NRF24L01                                                          11/22/2024 15:53:04 PAGE 3   

 114          
 115          bit FlagDataReadReady = 0;
 116          int currentProcess = 0;
 117              
 118          /*initialization RF(as RX)*/
 119          bit NRF_init(){
 120   1        switch(currentProcess){
 121   2          case START_PROCESS: NRF_CE = 0;                   break;
 122   2          
 123   2          case 1: NRF_delay(NRF_DELAY_SHORT);               break;
 124   2          case 2: NRF_delay(NRF_DELAY_MID);                 break;
 125   2          case 3: Send_SPI_NRF( &packetRX.vEN_AA,     2 );  break;
 126   2          case 4: Send_SPI_NRF( &packetRX.vSETUP_AW,  2 );  break;  
 127   2          case 5: Send_SPI_NRF( &packetRX.vRF_CH,     2 );  break;  
 128   2          case 6: Send_SPI_NRF( &packetRX.vRF_SETUP,  2 );  break;  
 129   2          case 7: Send_SPI_NRF( &packetRX.vEN_RXADDR, 2 );  break;
 130   2          case 8: Send_SPI_NRF( &packetRX.vDYNPD,     2 );  break;  
 131   2          case 9: Send_SPI_NRF( &packetRX.vFEATURE,   2 );  break;
 132   2          
 133   2          case 10:Send_SPI_NRF( &packetRX.vTX_ADDR,   6 );  break;
 134   2      
 135   2          case 11:Send_SPI_NRF( &packetRX.vRX_PW_P0,  2 );  break;
 136   2          case 12:Send_SPI_NRF( &packetRX.vRX_PW_P1,  2 );  break;
 137   2          case 13:Send_SPI_NRF( &packetRX.vRX_PW_P2,  2 );  break;
 138   2          case 14:Send_SPI_NRF( &packetRX.vRX_PW_P3,  2 );  break;
 139   2          case 15:Send_SPI_NRF( &packetRX.vRX_PW_P4,  2 );  break;
 140   2          case 16:Send_SPI_NRF( &packetRX.vRX_PW_P5,  2 );  break;
 141   2          
 142   2          case 17:Send_SPI_NRF( &packetRX.vRX_ADDR0,  6 );  break;
 143   2          case 18:Send_SPI_NRF( &packetRX.vRX_ADDR1,  6 );  break;
 144   2          case 19:Send_SPI_NRF( &packetRX.vRX_ADDR2,  2 );  break;
 145   2          case 20:Send_SPI_NRF( &packetRX.vRX_ADDR3,  2 );  break;
 146   2          case 21:Send_SPI_NRF( &packetRX.vRX_ADDR4,  2 );  break;
 147   2          case 22:Send_SPI_NRF( &packetRX.vRX_ADDR5,  2 );  break;
 148   2          case 23: /*mode RF*/
 149   2            if(modeRF){ Send_SPI_NRF( &packetRX.vCONFIG,  2 );}
 150   2            else{       Send_SPI_NRF( &packetTX.vCONFIG,  2 );}break;
 151   2          
 152   2          case 24: NRF_delay(NRF_DELAY_MID);                break;
 153   2          case 25:  /*state CE in end init*/
 154   2            if(modeRF){ NRF_CE = 1;}
 155   2            else{       NRF_CE = 0;}                        break;
 156   2            
 157   2          case 26:currentProcess = END_PROCESS;             break;
 158   2          default: break;
 159   2        }
 160   1        return Check_Out();
 161   1      }
 162          
 163          /*NRF change mode to RX or TX */
 164          bit NRF_change_mode_RF(){
 165   1        switch(currentProcess){
 166   2          case START_PROCESS: NRF_CE = 0;                   break;
 167   2          case 1: NRF_delay(NRF_DELAY_MID);                 break;
 168   2          case 2: /*mode RF*/
 169   2            if(modeRF){ Send_SPI_NRF( &packetRX.vCONFIG,  2 );}
 170   2            else{       Send_SPI_NRF( &packetTX.vCONFIG,  2 );}break;
 171   2            
 172   2          case 3: NRF_delay(NRF_DELAY_MID);                 break;
 173   2          case 4: /*state CE in end init*/
 174   2            if(modeRF){ NRF_CE = 1;}
 175   2            else{       NRF_CE = 0;}                        break;
C51 COMPILER V9.53.0.0   NRF24L01                                                          11/22/2024 15:53:04 PAGE 4   

 176   2          
 177   2          case 5: currentProcess = END_PROCESS;             break;
 178   2          default: break;
 179   2        }
 180   1        return Check_Out();
 181   1      }
 182          
 183          /*NRF send(radio) */
 184          bit NRF_send(/*amount bytes*/){
 185   1        switch(currentProcess){
 186   2          case START_PROCESS: NRF_CE = 0;                             break;
 187   2          case 1: /*write something value*/;                          break;
 188   2          case 2: Send_SPI_NRF( &COMMAND_SEND_RF,/*amount bytes*/ 2 );break;
 189   2          case 3: NRF_CE = 1;                                         break;
 190   2          case 4: NRF_delay(NRF_DELAY_SHORT);                         break;
 191   2          case 5: NRF_CE = 0;                                         break;
 192   2          case 6: Send_SPI_NRF( &COMMAND_CLEAR_IRQ, 2 );              break;
 193   2          case 7: currentProcess = END_PROCESS;                       break;
 194   2          default: break;
 195   2        }
 196   1        return Check_Out();
 197   1      }
 198          
 199          /*NRF get(radio) */
 200          bit NRF_get(/*amount bytes*/){
 201   1        switch(currentProcess){
 202   2          case START_PROCESS: NRF_CE = 1;                               break;
 203   2          case 1: NRF_delay(NRF_DELAY_SHORT);                           break;
 204   2          case 2: /*NRF_CE = 0;*/                                       break;  
 205   2          case 3: Send_SPI_NRF( &COMMAND_READ_RF, /*amount bytes*/ 2 ); break;
 206   2          case 4: Send_SPI_NRF( &COMMAND_CLEAR_FLUSH_RX, 2 );           break;
 207   2          case 5: Send_SPI_NRF( &COMMAND_CLEAR_IRQ, 2 );                break;
 208   2          case 6: currentProcess = END_PROCESS;                         break;
 209   2          default: break;
 210   2        }
 211   1        return Check_Out();
 212   1      } 
 213          
 214          /*send info for SPI*/
 215          void Send_SPI_NRF(unsigned char *message,int amountMessage){
 216   1        SPI_write_amount_byte(amountMessage);       // amount byte
 217   1        SPI_write_TX_buf(message);                  // write in Buf TX
 218   1        SPI_Start();                                // start exchange
 219   1      }
 220          
 221          /* read last answer for spi*/ 
 222          void NRF_read_value(void){
 223   1        int i;
 224   1        for(i = 0; i < NRF_MASSIV_SIZE; i++){
 225   2          readBuf[i] = valueBufferArrayRx[i];
 226   2        }
 227   1      }
 228          
 229          /*check - end process?*/
 230          bit Check_Out(){
 231   1        if(currentProcess == END_PROCESS){ 
 232   2          currentProcess = 0;
 233   2          return 1;
 234   2        }
 235   1        else {
 236   2          currentProcess++;
 237   2          return 0;
C51 COMPILER V9.53.0.0   NRF24L01                                                          11/22/2024 15:53:04 PAGE 5   

 238   2        }
 239   1      }
 240          
 241          /*NRF delay(wait)*/
 242          void NRF_delay(int delayValue){
 243   1        SPI_Delay_Set(delayValue);
 244   1      }
 245          
 246          
 247          
 248            
 249          
 250          
 251          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    682    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    450    ----
   PDATA SIZE       =     18    ----
   DATA SIZE        =     10       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
