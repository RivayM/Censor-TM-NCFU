C51 COMPILER V9.53.0.0   SPI_PROG                                                          12/10/2024 11:10:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI_PROG
OBJECT MODULE PLACED IN .\Code\Obj\SPI_prog.obj
COMPILER INVOKED BY: D:\USR\Keil_v5\C51\BIN\C51.EXE Code\Source\SPI_prog.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib_nuvoton
                    -;.\Common;.\Code\Head;.\Code\Source;.\Code\Obj;.\LST;.\Output) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\SPI_pr
                    -og.lst) TABS(2) OBJECT(.\Code\Obj\SPI_prog.obj)

line level    source

   1          //********************************************************
   2          //  PROG_SPI 
   3          //********************************************************
   4          #include <SPI_prog.H>
   5          #include <N76E003.H>
   6           
   7          pdata unsigned char valueBufferArrayTx[BUFFER_SPI_MASSIV_SIZE] = 0;  
   8          pdata unsigned char valueBufferArrayRx[BUFFER_SPI_MASSIV_SIZE] = 0;
   9          
  10          int amountByteForSendSPI  = BUFFER_SPI_MASSIV_SIZE; 
  11          int counterBitSPI         = 0;   
  12          int counterByteSPI        = 0;
  13          int valueDelay            = 0;
  14          
  15          bit FlagSPIGlobal         = 0;
  16          bit FlagExchangeSPIStart  = 0;
  17          bit FlagSPIDelay          = 0;
  18          
  19          void SPI_write_amount_byte(int value){amountByteForSendSPI = value;}
  20          
  21          unsigned char *SPI_get_RX_buf(){return &valueBufferArrayRx;}
  22          
  23          void SPI_write_TX_buf(unsigned char *buf){
  24   1        int  i;
  25   1        for( i = 0; i <= amountByteForSendSPI; i++ ){
  26   2          valueBufferArrayTx[i] = *( buf + i );
  27   2        }
  28   1      }
  29          
  30          //********************************************************
  31          //      _____      _____        ->  CLK
  32          //      |   |      |   |
  33          //______|   |______|   |______
  34          //  f()  f()  f()   f()  f()    ->  SPI_exchange_start()
  35          //********************************************************
  36          /* main func(for timer) */
  37          void SPI_exchange_start(void){
  38   1        /*every clk launch*/
  39   1        SPI_exchange_do( 
  40   1          SPI_Data_Convert_Bit(
  41   1            &valueBufferArrayTx[counterByteSPI]), // buf  for TX
  42   1          &valueBufferArrayRx[counterByteSPI]);   // buf  for RX
  43   1      }
  44          
  45          /* exchange bitwise operation */
  46          void SPI_exchange_do(unsigned char valueMosi, unsigned char *outSideBuffer){ 
  47   1      /******************************/
  48   1        if(counterBitSPI){      
  49   2          PIN_CLK_SPI =~ PIN_CLK_SPI;
  50   2        }
  51   1        else{ /*counterBit=0*/            // what do when start packet
  52   2          if(PIN_CLK_SPI == SPI_CPOL ){       // check setings
  53   3            /*don't change state*/
C51 COMPILER V9.53.0.0   SPI_PROG                                                          12/10/2024 11:10:02 PAGE 2   

  54   3          }
  55   2          else{ 
  56   3            PIN_CLK_SPI =~ PIN_CLK_SPI;   
  57   3          }   
  58   2        }
  59   1        if( PIN_CLK_SPI == SPI_CPHA) {        // CPHA - when next bit 
  60   2      /******************************/
  61   2          switch(counterBitSPI){              // Start
  62   3      /*End bit packet  */
  63   3            case BUFFER_SPI /*  max bit */:                 
  64   3              PIN_MOSI_SPI    = 1;
  65   3              //PIN_MISO_SPI  = 1;
  66   3              PIN_CLK_SPI     = SPI_CPOL; 
  67   3              counterBitSPI   = 0;
  68   3              SPI_exchange_end();             // continue?
  69   3              SPI_Data_Convert_Byte();        // next packet
  70   3              break;
  71   3      /* process going  */
  72   3            default  /* 0 -> max bit - 1*/: 
  73   3              PIN_CS_SPI   = 0;
  74   3      /* send MoSi  */
  75   3              if(valueMosi){PIN_MOSI_SPI = 1;}
  76   3              else{         PIN_MOSI_SPI = 0;}
  77   3      /* send MiSo  */
  78   3              if ( PIN_MISO_SPI == 1){          
  79   4                outSideBuffer += SPI_Data_Convert_Bit(outSideBuffer);
  80   4              } 
  81   3      /* next bit   */
  82   3              counterBitSPI++;                  
  83   3              break;
  84   3          }
  85   2        }
  86   1      /******************************/  
  87   1        if(counterBitSPI==0 && SPI_CPHA !=PIN_CLK_SPI){
  88   2          PIN_CLK_SPI =~ PIN_CLK_SPI; 
  89   2        }
  90   1      /******************************/
  91   1      }
  92          
  93          /* In the latest BYTE exchange SPI*/
  94          void SPI_exchange_end(void){  
  95   1        #if SPI_DATA_BYTE == SPI_MS_BYTE
                  if(counterByteSPI == 0){ 
                    SPI_End();  
                  }
                #else
 100   1          if(counterByteSPI == amountByteForSendSPI - 1){ 
 101   2            SPI_End();  
 102   2          }
 103   1        #endif
 104   1      }
 105          
 106          /* In the end exchange SPI*/
 107          void SPI_End(void){
 108   1        PIN_CS_SPI  = 1;
 109   1        FlagSPIGlobal = 0; 
 110   1      }
 111          
 112          
 113          /* Convert DATA BYTE*/
 114          void SPI_Data_Convert_Byte(){ 
 115   1      #if SPI_DATA_BYTE == SPI_MS_BYTE
C51 COMPILER V9.53.0.0   SPI_PROG                                                          12/10/2024 11:10:02 PAGE 3   

                counterByteSPI--;     // SPI_MSbyte 
              #else
 118   1        counterByteSPI++;     // SPI_LSbyte
 119   1      #endif
 120   1      }
 121          
 122          /*Convert DATA BIT*/
 123          unsigned char SPI_Data_Convert_Bit(unsigned char *outSideBuffer){
 124   1        unsigned char buf;
 125   1        buf = *outSideBuffer;  
 126   1        /*
 127   1        in Nuvaton, shift operations by 0, we go to -1 
 128   1        and force the register to go around in a circle 
 129   1        (the whole cycle) - long operation
 130   1        */
 131   1      #if SPI_DATA_BIT == SPI_MSB
 132   1        
 133   1        buf &= (counterBitSPI >= BUFFER_SPI - 1) ? 
 134   1          0x01 : 
 135   1          0x01 << (BUFFER_SPI - counterBitSPI - 1) ;
 136   1      
 137   1      #else /*SPI_DATA_BIT == SPI_LSB*/
                
                buf &= (counterBitSPI >= BUFFER_SPI - 1) ? 
                  0x01 << BUFFER_SPI - 1 : 
                  0x01 << counterBitSPI ;
                
              #endif /*SPI_DATA_BIT */
 144   1        return buf;
 145   1      }
 146          
 147          /*Delay = 1 timer cycle timer*/
 148          void SPI_Delay(){
 149   1        if(valueDelay){ 
 150   2          valueDelay--; 
 151   2        }
 152   1        else{ 
 153   2          FlagSPIDelay  = 0;  
 154   2          FlagSPIGlobal = 0;
 155   2        }
 156   1      }
 157          
 158          /*SET Delay = 1 timer cycle timer*/
 159          void SPI_Delay_Set(int delay){
 160   1        valueDelay    = delay;
 161   1        FlagSPIDelay  = 1;
 162   1        FlagSPIGlobal = 1;
 163   1      }
 164          
 165          /* init clk */
 166          void SPI_CLK_init(bit value){ 
 167   1        PIN_CLK_SPI = value;
 168   1      }
 169          
 170          /* Start exchange spi */
 171          void SPI_Start(void){
 172   1      #if SPI_DATA_BYTE == SPI_MS_BYTE
                counterByteSPI = amountByteForSendSPI - 1;
              #else
 175   1        counterByteSPI = 0;
 176   1      #endif
 177   1        FlagSPIGlobal  = 1;
C51 COMPILER V9.53.0.0   SPI_PROG                                                          12/10/2024 11:10:02 PAGE 4   

 178   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    323    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     12    ----
   DATA SIZE        =      8       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
